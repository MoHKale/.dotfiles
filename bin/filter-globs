#!/usr/bin/env python3
import os
import sys
import fnmatch

def exists(iter):
    """assert whether `iter` has a next element"""
    try:
        next(iter)
        return True
    except StopIteration:
        return False

def glob_filter(args):
    globber = fnmatch.fnmatchcase if args.case_sensitive else fnmatch.fnmatch
    def do_filter(line):
        return exists(filter(lambda glob: globber(line, glob), args.globs)) != args.invert
    if args.basename:
        return lambda line: do_filter(os.path.basename(line))
    return do_filter

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(
        description="filter lines from STDIN that match (or don't match) GLOB")

    globs_group = parser.add_argument_group('Glob')
    globs_group.add_argument('globs', metavar='GLOB', default=[], nargs='*', help='GLOB to match')
    globs_group.add_argument('-p', '--path', metavar='PATH', action='append',
                        help='read globs from PATH seperated with DELIMETER')
    globs_group.add_argument('-d', '--seperator', metavar='DELIMITER', default=':',
                        help='DELIMITER used with PATH')
    globs_group.add_argument('-b', '--basename', action='store_true',
                             help='only match against basenames')

    parser.add_argument('-v', '--invert', action='store_true',
                        help="only show a line that doesn't match a GLOB")
    parser.add_argument('-i', '--icase', action='store_false',
                        dest='case_sensitive',
                        help='make pattern matching case insensitive')

    args  = parser.parse_args()
    vargs = vars(args)

    if args.path:
        seperator = vargs.pop('seperator')
        for path in vargs.pop('path'):
            args.globs.extend(path.split(seperator))

    if not args.globs:
        print(f'filter-globs: warning: no globs supplied, catting input', file=sys.stderr)
        for line in iter(sys.stdin.readline, ''):
            print(line, end='')
        exit(0)

    for f in filter(glob_filter(args), map(lambda s: s.rstrip(os.linesep), sys.stdin)):
        print(f)
