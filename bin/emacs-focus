#!/usr/bin/sh
# shell script to switch focus to emacs frames, cycling forward or
# backwards between open frames when you're currently already in a
# frame.

HOST=$(hostname)

# all the open emacs frames or tmux clients showing an emacs frame in the current pane.
emacs_windows=$(app-windows -t 'emacs@'"$HOST"'|tmux@'"$HOST"' \\[.+:[[:digit:]]+\\] emacs')

print_usage() {
    echo "Usage: $0 [-h] [-a] [-b] [-c]"
    echo ""
    echo "Options":
    echo "  -h    print this help message and exit"
    echo "  -a    only work on frames in this desktop"
    echo "  -b    go backwards through the frame list"
    echo "  -c    create a new frame if one doesn't exist"
}

while getopts 'abch' OPTION; do
    case "$OPTION" in
        a) filter_by_desktop=0 ;;
        b) toggle_backwards=1 ;;
        c) create_frame=1 ;;
        h) print_usage
           exit 0 ;;
        \?) print_usage >&2
           exit 0 ;;
    esac
done

get_next_emacs_frame() { #(active_window_wid)
    # retrieves the wmctrl row entry for the next emacs window
    # this method also handles logic for moving forwards or
    # backwards and makes sure to wrap around to the first or
    # last known window when the end or beginning is reached.

    if [ "${toggle_backwards:-0}" -eq 1 ]; then
        awk_script='{ print prev; exit }; { prev=$0 }' # print previous or empty
        wraparound_command="tail -n 1" # back to bottom when top of list reached
    else
        awk_script='{ getline; print; exit }' # print line after match & quit
        wraparound_command="head -n 1" # back to top when bottom of list reached
    fi

    next_row=$(<<< "$emacs_windows" awk -e '{ print $0 }' -e 'END { print "\n" }' | awk -e '$1 ~ /(0x)?0*'$1'/ '"${awk_script}")
    if [ ! -z "${next_row}" ]; then echo "${next_row}"; else echo "${emacs_windows}" | ${wraparound_command}; fi # row or wrapped row
}

if [ -z "$emacs_windows" ]; then
    [ "${create_frame:-0}" -eq 1 ] && emacs-make-frame
    # begin in current dekstop when there's no frame to toggle
else
    active_desktop=$(wmctrl -d | grep -P '\*' | cut -d ' ' -f 1)
    in_current_desktop=$(<<< "$emacs_windows" awk -e '$2 == '${active_desktop})

    if [ "${filter_by_desktop:-1}" -eq 1 -a ! -z "$in_current_desktop" ]; then
        # only work on those in current desktop when a frame in this desktop exists & filter_by_desktop is true
        emacs_windows=$in_current_desktop
    fi

    if [ $(<<< "$emacs_windows" wc -l) -eq 1 ]; then
        # only one emacs window is open, simply toggle it
        wmctrl -ia $(<<< "$emacs_windows" cut -d ' ' -f 1)
    else
        active_window_wid=$(printf "%x" $(xdotool getwindowfocus)) # as hex, no preceding 0x0
        active_window_pid=$(xdotool getwindowfocus getwindowpid) # for comparing emacs active?

        if [ -z "$(<<< "$emacs_windows" awk -e '$3 == '$active_window_pid)" ]; then
            # currently active window isn't emacs, so activate first match
            wmctrl -ia $(<<< "$emacs_windows" head -n 1 | cut -d ' ' -f 1)
        else
            wmctrl -ia $(get_next_emacs_frame "$active_window_wid" | cut -d ' ' -f 1)
        fi
    fi
fi
