#!/usr/bin/env bash
# original source [[https://github.com/gokcehan/lf/wiki/Ranger][here]]. TODO reimplement in rust.

set -C -f -u
IFS=$'\n'

# ANSI color codes are supported.
# STDIN is disabled, so interactive scripts won't work properly

# This script is considered a configuration file and must be updated manually.

# Meanings of exit codes:
# code | meaning    | action of ranger
# -----+------------+-------------------------------------------
# 0    | success    | Display stdout as preview
# 1    | no preview | Display no preview at all
# 2    | plain text | Display the plain content of the file

# Script arguments
FILE_PATH="$1"         # Full path of the highlighted file

FILE_EXTENSION="${FILE_PATH##*.}"
FILE_EXTENSION_LOWER=$(tr '[:upper:]' '[:lower:]' <<< "$FILE_EXTENSION")

# Settings
HIGHLIGHT_SIZE_MAX=262143  # 256KiB
HIGHLIGHT_TABWIDTH=8
HIGHLIGHT_STYLE='pablo'
PYGMENTIZE_STYLE='autumn'
BAT_THEME='an-old-hope'

# early cancel switch when previewing directories. this isn't done
# by ranger/lf, but my fzf script might use this script for previews.
if [ -d "$FILE_PATH" ]; then
    ls "$FILE_PATH" --color=always --group-directories-first -1
    exit 0
fi

_pygmentize_format() {
    if [ "$( tput colors )" -ge 256 ]; then
        echo 'terminal256'
    else
        echo 'terminal'
    fi
}

_highlight_format() {
    if [ "$( tput colors )" -ge 256 ]; then
        echo 'xterm256'
    else
        echo 'ansi'
    fi
}

handle_extension() {
    case "$FILE_EXTENSION_LOWER" in
        ## Archive
        a|ace|alz|arc|arj|bz|bz2|cab|cpio|deb|gz|jar|lha|lz|lzh|lzma|lzo|\
        rpm|rz|t7z|tar|tbz|tbz2|tgz|tlz|txz|tZ|tzo|war|xpi|xz|Z|zip)
            atool --list -- "$FILE_PATH" && exit 5
            bsdtar --list --file "$FILE_PATH" && exit 5
            exit 1;;
        rar)
            ## Avoid password prompt by providing empty password
            unrar lt -p- -- "$FILE_PATH" && exit 5
            exit 1;;
        7z)
            ## Avoid password prompt by providing empty password
            7z l -p -- "$FILE_PATH" && exit 5
            exit 1;;

        ## PDF
        pdf)
            ## Preview as text conversion
            pdftotext -l 10 -nopgbrk -q -- "$FILE_PATH" - | \
              fmt -w "$PV_WIDTH" && exit 5
            mutool draw -F txt -i -- "$FILE_PATH" 1-10 | \
              fmt -w "$PV_WIDTH" && exit 5
            exiftool "$FILE_PATH" && exit 5
            exit 1;;

        ## BitTorrent
        torrent)
            transmission-show -- "$FILE_PATH" && exit 5
            exit 1;;

        ## OpenDocument
        odt|ods|odp|sxw)
            ## Preview as text conversion
            odt2txt "$FILE_PATH" && exit 5
            ## Preview as markdown conversion
            pandoc -s -t markdown -- "$FILE_PATH" && exit 5
            exit 1;;

        ## XLSX
        xlsx)
            ## Preview as csv conversion
            ## Uses: https://github.com/dilshod/xlsx2csv
            xlsx2csv -- "$FILE_PATH" && exit 5
            exit 1;;

        ## HTML
        htm|html|xhtml)
            ## Preview as text conversion
            w3m -dump "$FILE_PATH" && exit 5
            lynx -dump -- "$FILE_PATH" && exit 5
            elinks -dump "$FILE_PATH" && exit 5
            pandoc -s -t markdown -- "$FILE_PATH" && exit 5
            ;;

        ## JSON
        json|ipynb*)
            jq --color-output . "$FILE_PATH" && exit 5
            python -m json.tool -- "$FILE_PATH" && exit 5
            ;;

        ## Direct Stream Digital/Transfer (DSDIFF) and wavpack aren't detected
        ## by file(1).
        dff|dsf|wv|wvc)
            mediainfo "$FILE_PATH" && exit 5
            exiftool "$FILE_PATH" && exit 5
            ;; # Continue with next handler on failure
    esac
}

handle_mime() {
    local mimetype="$1"
    case "$mimetype" in
        # Text
        text/* | */xml)
            if command -v bat >/dev/null; then
                bat -p --color always --theme "$BAT_THEME" --paging never -- "$FILE_PATH"
                exit 0
            elif command -v highlight >/dev/null; then
                # Syntax highlight
                if [ "$( stat --printf='%s' -- "$FILE_PATH" )" -gt "$HIGHLIGHT_SIZE_MAX" ]; then
                    exit 2
                fi

                highlight --replace-tabs="$HIGHLIGHT_TABWIDTH" --out-format="$(_highlight_format)" \
                          --style="$HIGHLIGHT_STYLE" --force -- "$FILE_PATH"
            # elif command -v pygmentize >/dev/null; then
            #     pygmentize -f "$(_pygmentize_format)" -O "style=$PYGMENTIZE_STYLE" -- "$FILE_PATH"
            else
                cat "$FILE_PATH"
            fi

            exit 2
            ;;

        # Image
        image/*)
            # Preview as text conversion
            # viu -- "$FILE_PATH" && exit 0
            # img2txt --gamma=0.6 -- "$FILE_PATH" && exit 1
            exiftool "$FILE_PATH"
            exit 1;;

        # Video and audio
        video/* | audio/*|application/octet-stream)
            mediainfo "$FILE_PATH"
            exiftool "$FILE_PATH"
            exit 1;;
    esac
}

handle_fallback() {
    echo '----- File Type Classification -----' && file --dereference --brief -- "$FILE_PATH"
    exit 1
}

MIMETYPE="$( file --dereference --brief --mime-type -- "$FILE_PATH" )"
handle_extension
handle_mime "$MIMETYPE"
handle_fallback

exit 1
