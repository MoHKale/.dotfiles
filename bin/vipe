#!/usr/bin/env python
"""
vipe - edit pipe

reimplementation of moreutils vipe in python.
why? because I h8 perl :P.

see: https://joeyh.name/code/moreutils/

---

usage: command1 | vipe [options] | command2

Environment Variables
 * VISUAL - determine editor to use
 * EDITOR - determine editor to use

vipe allows you to run your editor in the middle of a unix pipeline and edit
the data that is being piped between programs. Your editor will have the full
data being piped from command1 loaded into it, and when you close it, that
data will be piped into command2.

changes from upstream version
* proper command line options and parsing.
* detects when input is a terminal and runs editor directly
  instead of reading input. Can be forced with -i/-I.

  why? if you start vipe directly, you're saying you want to write
  some text and pipe it out, why would you have to prepend vipe
  with echo or first send C-z before being prompted with your editor.
  In truth, this option is the main reason I created this fork.
"""

import os
import sys
import shlex
import logging
import pathlib
import tempfile
import subprocess

from mohkale.terminal import open_tty

def get_editor():
    """Return the path to the users configured editor.
    """
    return shlex.split(
        os.environ.get('VISUAL',
                       os.environ.get('EDITOR', 'vim')))

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     usage='command1 | %(prog)s [options] | command2',
                                     description="""
vipe - edit pipe

Substitute your editor in the middle of a shell pipeline.
Saves stdin to a file and passes it to your editor, then
cats the modified file back to stdout.

If the editor exits with a non-0 exit code, vipe breaks
the pipeline by exiting with the same code.
""")
    parser.add_argument('-R', '--no-redirect', action='store_false',
                        dest='redirect', help="Don't redirect stdin/stdout to tty")
    parser.add_argument('-i', '--read-stdin', action='store_true',
                        help="Read from stdin, even when it's a tty")
    parser.add_argument('-t', '--tmp-dir',
                        metavar='DIR', type=pathlib.Path,
                        default=pathlib.Path(tempfile.gettempdir()),
                        help='Place temporary pipe files into DIR')
    parser.add_argument('-e', '--editor', nargs='+',
                        help='Set editor command')
    parser.add_argument('-k', '--keep', action='store_true',
                        help='Keep temporary files after finishing EDITOR')
    parser.add_argument('-l', '--log-level', metavar='LEVEL',
                        type=lambda X: getattr(logging, X.upper()),
                        help='Level of logging output.')

    args = parser.parse_args()

    try:
        from mohkale.pylog.config import use_config as use_logging_config
    except ImportError:
        logging.basicConfig(level=args.log_level)
    else:
        use_logging_config('vipe', level=args.log_level)

    if not args.editor:
        args.editor = get_editor()

    if not args.tmp_dir.exists():
        try:
            args.temp_dir.mkdir(parents=True, exist_ok=True)
        except: # pylint: disable=W0702
            logging.exception('Failed to create temp directory: %s', args.tmp_dir)
            sys.exit(1)

    try:
        _, dest_file = tempfile.mkstemp(prefix='vipe-', dir=args.tmp_dir)
        dest_file = pathlib.Path(dest_file)
    except: # pylint: disable=W0702
        logging.exception('Failed to create temp temp file in: %s', args.tmp_dir)
        sys.exit(1)

    exit_code = 0
    try:
        if args.read_stdin or not sys.stdin.isatty():
            logging.info('Reading stdin into temp file: %s', dest_file)
            with dest_file.open('w') as fd:
                for line in sys.stdin:
                    fd.write(line)

        cmd = args.editor + [str(dest_file)]
        logging.debug('running editor: %s', ' '.join(cmd))
        if args.redirect:
            with open_tty() as tty:
                res = subprocess.run(cmd, stdin=tty, stdout=tty)
        else:
            res = subprocess.run(cmd)

        exit_code = res.returncode
        if res.returncode != 0:
            logging.error('Process exited with non-0 exit code: %d', exit_code)
        else:
            with dest_file.open('r') as fd:
                for line in fd:
                    sys.stdout.write(line)
    finally:
        if not args.keep:
            logging.debug('Removing temp file: %s', dest_file)
            dest_file.unlink()

    sys.exit(exit_code)
