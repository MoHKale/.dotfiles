#!/usr/bin/env python3
# pylint: disable=subprocess-run-check, missing-module-docstring

import sys
import logging
import pathlib
import subprocess
import dataclasses

from importlib.machinery import SourceFileLoader
from importlib.util import spec_from_loader, module_from_spec

def load_xopen():
    """Load my xopen script as a python module"""
    main = pathlib.Path(__file__).parent / 'xopen'
    spec = spec_from_loader("xopen", SourceFileLoader("xopen", str(main)))
    module = module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

def run_desktop(desktop, urls, **_):
    """Execute a desktop file `desktop' with url URLs."""
    purls = [xopen.URL(url) for url in urls]
    read = xopen.DesktopFind.read_desktop_file(desktop)
    if read is None:
        logging.error('Failed to read desktop file')
        return False

    opener = xopen.GenericOpener(
        **{f.name: None for f in dataclasses.fields(xopen.GenericOpener)})
    opener._desktop_map[desktop] = read  # pylint: disable=protected-access

    cmd = read.get('Desktop Entry', {}).get('exec')
    if not cmd:
        logging.error('Desktop file lacks an exec key')
        return False

    success = True
    for cmd in opener.generate_cmds(cmd, read, desktop, purls):
        logging.info('Running command: %s', cmd)
        if subprocess.run(cmd, shell=True).returncode != 0:
            success = False
    return success

if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,
                                     description="""
xrun - execute desktop files directly with URLs

This script interfaces through xopen to let you directly
run the Exec line of a desktop file. Unlike xopen, this
is designed more to open a program you already know, rather
than find the a program to open a URL.
""")
    parser.add_argument('desktop', help='Name (or path) to the desktop file to open')
    parser.add_argument('urls', nargs='*', help='URLs to pass through DESKTOP')

    parser.add_argument('-l', '--logging_level',
                        metavar='LEVEL',
                        type=lambda x: getattr(logging, x.upper()),
                        help='Set verbosity of logging output')
    color_map = {'always': True, 'never': False, 'auto': sys.stdout.isatty()}
    parser.add_argument('-c', '--color',
                        default='auto', choices=color_map.keys(),
                        help='Whether to color logging output')
    pargs = parser.parse_args()
    vargs = vars(pargs)

    color = color_map.get(vargs.pop('color'), False)

    xopen = load_xopen()
    if pargs.logging_level is None:
        pargs.logging_level = xopen.default_logging_level()
    xopen.setup_logger(vargs.pop('logging_level'), color)
    sys.exit(0 if run_desktop(**vargs) else 1)
