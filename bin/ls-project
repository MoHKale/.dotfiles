#!/usr/bin/env bash
# Recursively find files in the current project directory.
#
# Uses a host of different programs to find ways to respect ignore
# files (such as .gitignore or .ignore etc.).

set -e # auto exit on a failed command

function print_usage {
    echo "Usage: ls-project [-h] [-d|-f] [-z] [DIR]"
}

function print_help {
    print_usage
    echo ""
    echo "Recursively list all the files in a project."
    echo "Listing all files if the CWD isn't a project."
    echo ""
    echo "optional arguments:"
    echo "  -h      show this help message and exit"
    echo "  -d/-f   only list directories or files"
    echo "  -z      output null delimited"
    echo "  -a      skip project check and list all files"
    echo "  -u/-U   guarantee the paths are outputted uniquely"
}

dirs_only=0 files_only=0 null=0 find_all=0 uniquify=1
while getopts 'hdfzauU' OPTION; do
    case "$OPTION" in
        h) print_help
           exit 0
           ;;
        \?) print_usage >&2
            exit 1
            ;;
        d) dirs_only=1 ;;
        f) files_only=1 ;;
        z) null=1 ;;
        a) find_all=1 ;;
        u) uniquify=1 ;;
        U) uniquify=0 ;;
    esac
done
shift "$((OPTIND-1))"
[ -n "$*" ] && cwd="$*" || cwd="."

# ┌───────────────────┐
# │ Utility Functions │
# └───────────────────┘

function files_to_dir {
    # strip out filename components, removing all but the filename.
    # WARN: there's this weird issue were some paths lead xargs to give out
    #       two lines, one ending with a / and the other beginning with a .
    #       For now I'm just stripping both these out, but I should probably
    #       come up with a better solution.
    xargs -d '\n' -r dirname {} + | sed --quiet -e '/^\.$/d' -e '/^\/$/d' -e 'p' | 
        if [ "$uniquify" -eq 1 ]; then awk '!seen[$0]++'; else cat; fi
}

function files_to_files_and_dir {
    # for each file in STDIN, read the directory component and echo
    # it out seperately. each directory is only outputted once.
    awk -e '
{
  if (match($0, /(.+)\/[^\/]+$/, group)) {
    dir = group[1]
    if (!dirs[dir]) {
      dirs[dir] = 1
      print dir
    }

    print $0
  } else {
    print $0
  }
}'
}

# ┌─────────┐
# │ Filters │
# └─────────┘
#
# Filters accept file paths from stdin and transform them depending
# on the environment of the current script.

function file_filter {
    # Given a stream of file paths, this filter either filters out the
    # basename component or zips together directories and files in the
    # output.
    if [ "$dirs_only" -eq 1 ]; then
        files_to_dir
    elif [ "$files_only" -eq 1 ]; then
        cat
    else
        files_to_files_and_dir
    fi
}

function null_filter() {
    if [ "$null" -eq 1 ]; then tr '\n' '\0'; else cat; fi
}

# ┌──────────┐
# │ Handlers │
# └──────────┘

function do_rg() {
    rg --files --follow -- "$cwd" | file_filter | null_filter
}

function do_git() {
    git ls-files -- "$cwd" | file_filter | null_filter
}

function do_fd() {
    flags=( )
    if [ "$dirs_only" -eq 1 ]; then
        flags+=( --type d )
    elif [ "$files_only" -eq 1 ]; then
        flags+=( --type f )
    fi

    [ "$null" -eq 1 ] && flags+=( --print0 )

    fd --follow -H --color never "${flags[@]}" . -- "$cwd"
}

function do_find() {
    flags=( )
    if [ "$dirs_only" -eq 1 ]; then
        flags+=( -type d )
    elif [ "$files_only" -eq 1 ]; then
        flags+=( -type f )
    fi

    [ "$null" -eq 1 ] && flags+=( -print0 )

    find -L "$cwd" -mindepth 1 "${flags[@]}"
}

# ┌─────────────┐
# │ Switchboard │
# └─────────────┘
#
# Run through available programs and invoke the first handler you find.

if [ "$find_all" -eq 1 ]; then
    # jump straight to the fallback behaviour
    do_find
elif hash rg; then
    do_rg
elif [ -d .git ] || git git rev-parse --git-dir; then
    do_git
elif hash fd; then
    do_fd
else
    do_find
fi 2>/dev/null
