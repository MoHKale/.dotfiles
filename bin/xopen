#!/usr/bin/env python3
"""
A utility script to open a URL in the registered default application.

This script is a stripped down reimplementation of [[https://linux.die.net/man/1/xdg-open][xdg-open]] for use
in my dotfiles. I've had issues with xdg-open not differentiating
between KDE and KDE5. Forking it seemed to be the most straight forward
way to keep a persistent version of xdg-open across all my files.

This script takes more than a little inspiration from [[https://github.com/wor/pyxdg-open][pyxdg-open]].
"""

# pylint: disable=too-many-lines, missing-module-docstring, line-too-long
# pylint: disable=multiple-statements, disable=invalid-name, subprocess-run-check
# pylint: disable=useless-object-inheritance, missing-class-docstring

# TODO: finish add async support.

import os
import re
import sys

import shlex
import subprocess

import abc
import json
import enum
import urllib
import locale
import logging
import functools
import itertools
import dataclasses
import configparser

import typing as t
from collections import namedtuple

import mimetypes as mime

HAS_MAGIC = True
try:
    import magic  # pip install python-magic
except ImportError:
    HAS_MAGIC = False

# ┌─────────────────────┐
# │      Constants      │
# └─────────────────────┘

# default terminal emulator, used when (literally) no alternative is found
# on this system.
DEFAULT_TERM = 'xterm'

# ┌─────────────────┐
# │      Utils      │
# └─────────────────┘
#
# Functions that're used in a bunch of other places.

T = t.TypeVar('T')
def first(it: t.Sequence[T]) -> t.Union[None, T]:
    """extract the first value from the iterator `it'."""
    try:
        return next(it)
    except StopIteration:
        pass
    return None


def can_exec(path):
    """Asseert whether `path` is executable."""
    return os.path.isfile(path) and os.access(path, os.X_OK)

@functools.lru_cache()
def which(program: str):
    """Mimics *nix 'which' command.

    Finds given program from path if it's not absolute path.
    Else just checks if it's executable.

    This is quite trivial function is orginally from [[http://stackoverflow.com/a/377028/538470][here]].

    Returns:
        str. Found executable with full path.

    Parameters:
        program: str. Executable name.
    """
    dirname, _ = os.path.split(program)
    if dirname:
        if can_exec(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if can_exec(exe_file):
                return exe_file
    return None

# pylint: disable=too-many-arguments
def nrwalk(top, mindepth=0, maxdepth=sys.maxsize,
           dirfilter=None, filefilter=None, onerror=None):
    """Non-recursive directory tree generator.

    TODO why not just os.walk?

    This is from pyworlib python utility lib, Copyright (C) Esa Määttä 2011,
    license GPL3.

    Resembles os.walk() with additional min/max depth pruning and additional
    dirfilter and filefilter functions.

    Dir and file filter functions take two arguments, first is the dir/file and
    the second is the root directory where the dir/file is located.

    Yields a 3-tuple as does os.walk(): dirpath, dirnames, filenames

    Parameters:
        top: str.
        mindepth: int. Minimum depth of descent into subdirs.
        maxdepth: int. Maximum depth of descent into subdirs.
        dirfilter: bool func(str, str). If returns True for a dir then the dir
            is filtered away.
        filefilter: bool func(str, str). If returns True for a file then the
            file is filtered away. Receives filename and root path as
            parameters.
        topdown: bool. See os.walk().
        onerror: func. See os.walk().
        followlinks: bool. See os.walk().
    """
    def process_dir(root):
        try:
            names = os.listdir(root)
        except os.error as err:
            if onerror is not None:
                onerror(err)
            return [], []

        dirs, nondirs = [], []
        for name in names:
            if isdir(join(root, name)):
                dirs.append(name)
            else:
                nondirs.append(name)

        # Filter nondirs with filefilter and dirs with dirfilter, if filter
        # returns True for a file # then the file is filtered away
        if dirfilter:
            dirs = [x for x in dirs if not dirfilter(x, root)]
        if filefilter:
            nondirs = [x for x in nondirs if not filefilter(x, root)]

        return dirs, nondirs

    _, join, isdir = os.path.islink, os.path.join, os.path.isdir

    Dir_node = namedtuple('Dir_node', ['root', 'dirs', 'nondirs'])
    travelsal_stack = list()
    travelsal_stack.append(Dir_node(top, *process_dir(top)))
    if maxdepth >= len(travelsal_stack) - 1 >= mindepth:
        yield travelsal_stack[0]

    while True:
        if not travelsal_stack:
            break
        if travelsal_stack[len(travelsal_stack) - 1].dirs and \
                maxdepth >= len(travelsal_stack):
            _new_root = join(travelsal_stack[len(travelsal_stack) - 1].root,
                             travelsal_stack[len(travelsal_stack) - 1].dirs.pop())
            travelsal_stack.append(Dir_node(_new_root, *process_dir(_new_root)))
            if len(travelsal_stack) - 1 >= mindepth:
                yield travelsal_stack[len(travelsal_stack) - 1]
        else:
            travelsal_stack.pop()

def parse_comma_sep_list(csl_str):
    """Parses comma separated list string to a list.
    Parameters:
        cls_str: str. Comma separated list as a string.
    """
    sl = csl_str.split(",")
    sl = [os.path.expanduser(s.strip()) for s in sl]
    return sl

# ┌───────────────────────────────┐
# │      Generic File Opener      │
# └───────────────────────────────┘
#
# For opening files without a platform specific file opener. Defaults to
# using mimelist and desktop entries to find the first installed program
# which claims to be able to open the supplied URLs.

def desktop_list_parser(desktop_list_fn, mime_type_find=None, find_all=False):
    # TODO remove find_all
    """Parses desktop list file (defaults.list for example).
    If mime_type_find is given then return just first matching desktop file or
    None if not found. If mime_type_find is not given or evaluates to False then
    return all mime type desktop file pairs as a dict.

    Parameters:
        desktop_list_fn: str. Path of a desktop list file.
        mime_type_find: str. Mime type to find from given desktop list file.

    Returns:
        dict/[str]/None. See doc string.
    """
    mt_df_re = re.compile(
        r"""
            (^[^[]+)    # mimetype, line doesn't start with [
            =
            (.+)[;]?$   # desktop file, ignore possible ';' at the end
            """, re.I | re.X)
    mime_type_desktop_map = {}
    desktop_files = []
    with open(desktop_list_fn) as f:
        for line in f:
            m = mt_df_re.search(line)
            if not m:
                continue
            mime_type = m.groups()[0]
            single_mime_dfs = parse_comma_sep_list(m.groups()[1])
            # Just get the desktop files matching the mime type given
            if mime_type_find:
                if mime_type == mime_type_find:
                    if find_all:
                        desktop_files += single_mime_dfs
                    else:
                        return single_mime_dfs
                continue

            if mime_type in mime_type_desktop_map:
                mime_type_desktop_map[mime_type] += single_mime_dfs
            else:
                mime_type_desktop_map[mime_type] = single_mime_dfs

    if find_all:
        return desktop_files
    return mime_type_desktop_map if mime_type_desktop_map else None

@dataclasses.dataclass
class URL(object):
    """Store a URL alongside it's parsed protocol, target and mimetype.
    """

    url: str
    protocol: str = ""
    target: str = ""
    mimetype: str = ""
    desktop_file: str = None

    def __post_init__(self):
        canon_target = self.protocol == "file"
        if not self.protocol or not self.target:
            prot, tar = self._parse_protocol(self.url)
            if not self.protocol:
                self.protocol = prot
            if not self.target:
                self.target   = tar
            canon_target = canon_target or prot == "file"

        if canon_target:
            self.target = os.path.realpath(os.path.abspath(self.url))

        if not self.mimetype:
            self.mimetype = self._find_mimetype(self.url, self.protocol, self.target)

    @staticmethod
    def _parse_protocol(url):
        if url.startswith("/"):
            url = os.path.realpath(url)
            return "file", url

        m = re.match(r"([a-z]+):(\?|//)", url, re.I)
        if m:
            protocol = m.groups()[0].lower()
            target   = urllib.parse.unquote(url[m.span()[1]:])
            return protocol, target
        return "file", url

    # concreate mimetypes for application/octet-stream
    app_mimetypes = {
        '.chm': 'application/x-chm',
        '.sdf': 'application/x-spring-demo'
    }

    # mimetypes for specific URL protocols
    protocol_mimetypes = {
        'magnet': 'application/x-bittorrent',
    }

    @classmethod
    def _find_mimetype(cls, url, protocol, target):
        # adapted from [[https://github.com/wor/pyxdg-open/blob/1094f1e301fab5a22a46fefe31ea4427db1cfd7e/src/wor/xdg_open.py#L136][xdg-open/__get_mimetype__]].
        if protocol == "file":
            if not os.path.exists(target):  # guess from extension
                ext = os.path.splitext(target)[1]
                logging.debug('Guessing mimetype from file extension: %s', ext)
                if len(ext) <= 1:
                    return None

                mtype = mime.types_map.get(ext, None)
                if not mtype:
                    logging.warning("mimetypes could not determine mimetype"
                                    "from extension: %s", ext)
                return mtype

            logging.info('Finding mime type for file at path: %s', target)
            mtype = mime.guess_type(target)[0]
            if HAS_MAGIC:
                magic_mtype = magic.from_file(target, mime=True)
                if mtype != magic_mtype:
                    logging.warning('-------- mimetypes differed from magic --------')
                    logging.warning('%s != %s', repr(mtype), repr(magic_mtype))
                    logging.warning('-----------------------------------------------')
                if not mtype and magic_mtype:
                    logging.debug('Preffering magic type over missing mimetype: %s', mtype)
                    mtype = magic_mtype

            if mtype == "application/octet-stream":
                ext = os.path.splitext(target)[1]
                mtype = cls.app_mimetypes.get(ext, mtype)

            return mtype

        # try to use an associated mimetype for the given protocol
        try:
            return cls.protocol_mimetypes[protocol]
        except KeyError:
            pass

        # fallback to using the url mimetype or the protocol handler
        mtype = mime.guess_type(url)
        if not mtype:
            mtype = "x-scheme-handler/" + protocol
            logging.info("Defaulted protocol '%s' to mime type: '%s'",
                         protocol, mtype)
        return mtype

class DesktopFindSearchOrder(enum.IntEnum):
    """Represents the order in which DesktopFind can proceed.
    """
    LIST_FILES = enum.auto()
    DESKTOP_FP = enum.auto()

@dataclasses.dataclass
class DesktopFind(object):
    """Base class for automatically finding desktop files.
    Supports searching by list files, desktop paths and has
    a configurable search order.
    """

    paths: t.List[str]
    list_files: t.List[str]
    search_order: t.List[DesktopFindSearchOrder]

    def __hash__(self):
        # quick and simple instance based hash.
        return hash(repr(self))

    @functools.lru_cache(maxsize=None)  # cache all mime lookups
    def get_file(self, *args, **kwargs):
        """Alias for `get_files' which returns the first desktop file found.
        Generates tuples of (filepath: str, filecontents: dict)
        """
        return first(self.get_files(*args, **kwargs))

    def get_files(self, key, value):
        """Finds desktop file by key value pair.
        TODO: Support cached desktop file format... remember which desktop files give
        which values for key and then don't bother reading them again.

        Search either uses list files or desktop files depending on the value of
        `DesktopFind.search_order'.

        For example if given key, value pair is ("Categories","TerminalEmulator"), then
        every desktop file which contains "TerminalEmulator" value in "Categories" key is
        iterated.
        """
        for order in self.search_order:
            if order == DesktopFindSearchOrder.LIST_FILES:
                logging.debug("Running search on list files")

                # If MimeType key then search first from MimeType/Desktop file list files.
                if key == "MimeType" and self.list_files:
                    yield from self.search_mimelist(value)
            elif order == DesktopFindSearchOrder.DESKTOP_FP:
                logging.debug("Running search on desktop files from path")
                yield from self.search_files(key, value)
            else:
                logging.warning('Unknown value in search order: %s', order)
        return []

    @staticmethod
    def read_desktop_file(fpath) -> t.Union[dict, None]:
        """Read desktop file at fpath and return as a dict.
        NOTE: sections keys are case sensitive, but keys are lowercase.
        """
        logging.debug("Parsing desktop file: %s", fpath)
        df = configparser.ConfigParser()
        try:
            with open(fpath, 'r') as fd:
                df.read_file(fd)
                return df._sections  # pylint: disable=protected-access
        except:  # pylint: disable=bare-except
            logging.exception("Parsing desktop file %s failed", repr(fpath))
        return None

    def search_files(self, key, value):
        """Finds desktop file by searching from `self.paths'.
        Desktop file which contains given key value pair is returned.

        Desktop files are returned as DesktopFile objects.
        """

        # Next try to find correct desktop file by parsing invidual desktop files
        logging.debug("Find desktop file by search with key/value: %s", repr((key, value),))
        for path in self.paths:
            for root, _, files in nrwalk(path, filefilter=lambda f, _: not f.endswith(".desktop")):
                for f in files:
                    df_name = os.path.join(root, f)
                    df = self.read_desktop_file(df_name)
                    if not df:
                        continue

                    try:
                        # TODO maybe check if XDG allows MimeType in other sections
                        if value in df['Desktop Entry']['MimeType']:
                            yield df_name, df
                    except KeyError:
                        pass
        return []

    def _resolve_fullpath(self, desktop_file):
        """Retuns full path of a desktop file."""
        # We cannot know where desktop file is found?
        for dp in self.paths:
            full_path = os.path.join(dp, desktop_file)
            if os.path.isfile(full_path):
                return full_path
        return None

    def search_mimelist(self, mime_type):
        """Find desktop file from a mime list file.
        Desktop file paths and list files are read from global CONFIG.
        """

        def check_list_files(desktop_path):
            """Gets desktop file(s) name from a list file.
            Checks if list_files exist in the current desktop file path (dp) and if
            it's so then tries to find matchin desktop file name for the mime_type.
            If list files defines multiple desktop files in one entry, just takes
            the first one existing if not ´find_all´ defined.

            Uses:
                dp, list_files, mime_type

            Returns:
                [str]. Desktop file names matching the mime_type.
            """
            for lf in self.list_files:
                p = os.path.join(desktop_path, lf)
                if os.path.exists(p):
                    logging.debug("Searching list file: %s", p)
                    df = desktop_list_parser(p, mime_type)
                    if df and df[0]:
                        yield df, p
            return []

        # First parse desktop file lists, and try to find desktop file there
        for dp in self.paths:
            for list_file, desktop_files in check_list_files(dp):
                for desktop_file in desktop_files:
                    if not desktop_file:
                        continue  # TODO check whether this is needed
                    df_fp = self._resolve_fullpath(desktop_file)
                    if not df_fp:
                        logging.info("Skipping not found (list) desktop file "
                                     "%s, mentioned in %s", repr(desktop_file), repr(list_file))
                        continue

                    logging.info("Found desktop file from list: %s", list_file)
                    df = self.read_desktop_file(df_fp)
                    if df:
                        yield df_fp, df

@dataclasses.dataclass
class GenericOpener(object):
    paths: t.List[str]
    list_files: t.List[str]
    search_order: t.List[str]
    terminal: str = None

    @classmethod
    def from_kwargs(cls, **kwargs):
        """Construct from a keyword argument dict using only the needed fields."""
        names = {f.name for f in dataclasses.fields(cls)}
        return cls(**{key: value for key, value in kwargs.items() if key in names})

    def __post_init__(self):
        # enforce a default for the terminal options, uses the [[https://wiki.archlinux.org/index.php/I3#Terminal_emulator][i3]] config variable.
        self.finder = DesktopFind(self.paths, self.list_files, self.search_order)
        self.terminal = self.terminal or os.environ.get('TERMINAL')
        if not self.terminal:
            logging.info('Trying to find terminal emulator from desktop files')
            _, terminal_df = self.finder.get_file('Categories', 'TerminalEmulator')
            self.terminal = terminal_df.get('Desktop Entry', {}).get('Exec', DEFAULT_TERM)
        self._success = True  # whether we've sucesfully managed to open all URLs
        self._desktop_map = {}  # maps found desktop files to the file contents

    def _process_urls(self, urls, on_fail):
        for url in map(URL, urls):
            logging.info('Working on URL: %s', url.url)
            logging.debug('Protocol for url is: %s', url.protocol)
            logging.debug('Target for url is: %s', url.target)
            logging.debug('Mimetype for url is: %s', url.mimetype)

            if not url.mimetype:
                logging.error('Skipping url because no mimetype was found: %s',
                              url.mimetype)
                on_fail(url)
                continue

            df_path, dfile = self.finder.get_file('MimeType', url.mimetype)
            if not dfile:
                logging.error('Could not find desktop file for url: %s', url.url)
                on_fail(url)
                continue

            logging.info('Found desktop file: %s', df_path)
            url.desktop_file = df_path
            self._desktop_map[df_path] = dfile
            yield url

    def open(self, url) -> bool:
        """Open URLs using generic platform agnostic method.
        This mostly involves relying on mimetypes and desktop entry configurations.
        """
        def on_fail(): self._success = False

        for desktop_key, urls in itertools.groupby(self._process_urls(url, on_fail),
                                                   lambda x: x.desktop_file):
            df = self._desktop_map[desktop_key]
            cmd = df.get('Desktop Entry', {}).get('exec')
            if cmd is None:
                logging.error('Desktop entry lacks exec: %s', desktop_key)
                self._success = False
                continue

            for cmd in self.generate_cmds(cmd, df, desktop_key, list(urls)):
                logging.debug('Running command: %s', cmd)
                if subprocess.run(cmd, shell=True).returncode != 0:
                    self._success = False

        return self._success

    def generate_cmds(self, cmd, entry, entry_path, urls):
        """Generate command lines from spec `cmd' with urls.
        This involves substituting format patterns such as %d or %i, and then
        depending on whether `cmd' supports multiple URLs or not, generates a
        command line for each URL (or one command line for all URLs).

        When no urls have been supplied, just return command with any required
        URLs substituted with the empty string ''.
        """
        cmd = self.format_cmd(cmd, entry, entry_path)
        if entry.get('Desktop Entry', {}).get('terminal', '').lower() == 'true':
            def transform(cmd):
                return self.terminal + ' -e ' + cmd
        else:
            def transform(x):
                return x

        url_flags = ('%F', '%U', '%f', '%u')
        if len(urls) == 0:
            # The spec states that if you want to run a command without any URLs
            # replace these flags with the empty string.
            yield transform(functools.reduce(lambda ex, flag: ex.replace(flag, ''), url_flags, cmd))
            return []

        specifier = first(filter(lambda x: cmd.find(x) != -1, url_flags))
        # The spec states each Exec cmd line can only contain one of cmd_flags
        target = (lambda url: url.target) if specifier.lower() == '%f' else (lambda url: url.url)
        # useful lambda to extract the desired field for the target specifier

        if specifier in ('%f', '%u'):
            # Each exec line can only take upto one URL, so substitute that URL
            # into cmd once for each URL.
            for url in urls:
                yield transform(cmd.replace(specifier, shlex.quote(target(url))))
        elif specifier in ('%F', '%U'):
            # WARN this might end up exceeding the command line limit, TODO test.
            yield transform(cmd.replace(specifier, " ".join(shlex.quote(target(x)) for x in urls)))
        else:
            # this exec string doesn't depend on any urls.
            yield cmd
        return []

    @staticmethod
    def format_cmd(cmd, entry, entry_path):
        """Expands or removes field variables from the given string.
        Doesn't substitute url or file paths.
        """
        # TODO: '%' char escaping is not considered yet
        # http://standards.freedesktop.org/desktop-entry-spec/latest/ar01s06.html

        de = entry.get('Desktop Entry', {})

        # First remove/ignore deprecated
        cmd = cmd.replace('%d', "")
        cmd = cmd.replace('%D', "")
        cmd = cmd.replace('%n', "")
        cmd = cmd.replace('%N', "")
        cmd = cmd.replace('%v', "")
        cmd = cmd.replace('%m', "")

        cmd = cmd.replace('%i', de.get('Icon', ""))

        # Replace locale dependent name
        if cmd.find("%c") != -1:
            loc = locale.getlocale()[0]
            name = de.get(f'Name[{loc}]', de.get(f"Name[{loc.partition('_')[0]}]", ""))
            cmd = cmd.replace('%c', shlex.quote(name))

        # TODO: file name in URI form if not local (vholder?)
        cmd = cmd.replace('%k', shlex.quote(os.path.basename(entry_path)))
        return cmd

# ┌────────────────────────────────────────┐
# │      Desktop Environment Checkers      │
# └────────────────────────────────────────┘
#
# Uses programs specific to a given desktop environment to open URLs.
#
# WARN For now I'm passing all the urls to the first found url opener.
#      When these openers support multiple urls at once, this is fine.
#      However when they don't, I should spawn a new process for each
#      of them. I'll have to experiment with openers as I encounter
#      them.
#
# TODO remove this warning once I've tested all implemented openers.

@functools.lru_cache()
def xdg_current_desktop():  # pylint: disable=missing-function-docstring
    return os.environ.get('XDG_CURRENT_DESKTOP', '')

@functools.lru_cache()
def desktop_session():  # pylint: disable=missing-function-docstring
    return os.environ.get('DESKTOP_SESSION', '')

class Desktop(abc.ABC):
    """Abstract base class for a desktop environment with it's own `open' command.
    """

    def __init__(self, *args, **kwargs):
        self.args   = args
        self.kwargs = kwargs
        self.interactive = kwargs.get('interactive', False)

    @abc.abstractmethod
    def open(self, urls: t.List[str]) -> bool:
        """Open urls with current desktop environment."""

    @classmethod
    @abc.abstractmethod
    def is_current(cls) -> bool:
        """Assert whether the current environment matches this desktop environment."""
        return False

    def run_opener(self, *specs, run_generic=True):
        """Check for the presence of programs from spec, running the first one found.
        Spec should be a dictionary containing `cmd' for a command name and `exec' for
        the args that should passed to `subprocess.spawn' to spawn open the URLs.

        When `run_generic' is True, if all the url openers in specs were not found, then
        the generic url opener is used instead.
        """
        for spec in specs:
            cmd  = spec['cmd']
            args = spec['exec']

            logging.debug('Checking for url opener: %s', cmd)
            cmd = which(cmd)
            if not cmd:
                continue

            args = [a for a in args if a is not None]
            logging.info('Opening urls with: %s', cmd)
            logging.debug('Running command: %s', json.dumps(args))
            return subprocess.run(args).returncode == 0

        logging.info('Failed to find url opener for desktop: %s', type(self).__name__)
        if run_generic:
            logging.info('Running generic open command')
            return GenericOpener.from_kwargs(*self.args, **self.kwargs).open(self.kwargs['urls'])
        return False

class KDE(Desktop):
    def open(self, urls):
        res = True
        for url in urls:
            res = res and self.run_opener(
                {'cmd': 'kde-open',
                 'exec': ['kde-open', url]},
                {'cmd': 'kde-open5',
                 'exec': ['kde-open5', '--interactive' if self.interactive else None, '--', url]},
                {'cmd': 'kfmclient',
                 'exec': ['kfmclient', 'exec', url]},
                {'cmd': 'kioclient5',
                 'exec': ['kioclient5', '--interactive' if self.interactive else '', 'exec', url]},
            )
        return res

    # @staticmethod
    # @functools.lru_cache()
    # def plasmashell_version():
    #     """Determine current plasma version from Plasmashell"""
    #     logging.info('Determining plasmashell version')
    #     res = subprocess.run(['plasmashell', '--version'], capture_output=True)
    #     if res.returncode != 0:
    #         logging.error('Plasmashell exited with non-0 exit code: %d', res.returncode)
    #         return None
    #
    #     from packaging import version
    #     ver = version.parse(res.stdout.decode().split(' ')[1])
    #     logging.debug('Current plasmashell version is: %s', ver)
    #     return ver.major

    @classmethod
    def is_current(cls) -> bool:
        return xdg_current_desktop() == 'KDE' or \
            os.environ.get('KDE_FULL_SESSION') is not None

class Enlightenment(Desktop):
    def open(self, urls):
        return self.run_opener(
            {'cmd': 'enlightenment_open',
             'exec': ['enlightenment_open', *urls]}
        )

    @classmethod
    def is_current(cls) -> bool:
        return 'ENLIGHTENMENT' in xdg_current_desktop() or \
            os.environ.get('DESKTOP', '').startswith('Enlightenment')

class Deepin(Desktop):
    def open(self, urls):
        return self.run_opener(
            {'cmd': 'dde-open',
             'exec': ['dde-open', *urls]}
        )

    @classmethod
    def is_current(cls) -> bool:
        return xdg_current_desktop() in ['DEEPIN', 'Deepin', 'deepin']

class LXDE(Desktop):
    def open(self, urls):
        return self.run_opener(
            {'cmd': 'pcmanfm',
             'exec': ['pcmanfm', *urls]}
        )

    @classmethod
    def is_current(cls) -> bool:
        return xdg_current_desktop() == 'LXDE' or \
            desktop_session() in ('LXDE', 'Lubuntu')

class LXQt(Desktop):
    def open(self, urls):
        return self.run_opener()

    @classmethod
    def is_current(cls) -> bool:
        return xdg_current_desktop() == 'LXQt' or \
            os.environ.get('LXQT_SESSION_CONFIG') is not None

class MATE(Desktop):
    def open(self, urls):
        return self.run_opener(
            {'cmd': 'gio',
             'exec': ['gio', 'open', *urls]},
            {'cmd': 'gvfs-open',
             'exec': ['gvfs-open', *urls]},
            {'cmd': 'mate-open',
             'exec': ['mate-open', *urls]},
        )

    @classmethod
    def is_current(cls) -> bool:
        return xdg_current_desktop() == 'MATE' or \
            os.environ.get('MATE_DESKTOP_SESSION_ID') is not None or \
            desktop_session() == 'MATE'

class XFCE(Desktop):
    def open(self, urls):
        return self.run_opener(
            {'cmd': 'exo-open',
             'exec': ['exo-open', *urls]},
            {'cmd': 'gio',
             'exec': ['gio', 'open', *urls]},
            {'cmd': 'gvfs-open',
             'exec': ['gvfs-open', *urls]},
        )

    @classmethod
    def is_current(cls) -> bool:
        # elif xprop -root _DT_SAVE_MODE 2> /dev/null | grep ' = \"xfce4\"$' >/dev/null 2>&1; then DE=xfce;
        # elif xprop -root 2> /dev/null | grep -i '^xfce_desktop_window' >/dev/null 2>&1; then DE=xfce
        return xdg_current_desktop() == 'XFCE' or \
            desktop_session in ('xfce', 'xfce4', 'Xfce Session')

class Darwin(Desktop):
    def open(self, urls):
        return self.run_opener(
            {'cmd': 'open',
             'exec': ['open', *urls]},
        )

    @classmethod
    def is_current(cls) -> bool:
        return sys.platform.startswith('darwin')

class Windows(Desktop):
    def open(self, urls):
        res = True
        for url in urls:
            res = res and self.run_opener(
                {'cmd': 'cygstart',
                 'exec': ['cygstart', url]},
                {'cmd': 'start',
                 'exec': ['start', '', url]}
            )
        return res

    @classmethod
    def is_current(cls) -> bool:
        return sys.platform.startswith('cygwin') or \
            sys.platform.startswith('msys') or\
            os.name == 'nt'

class Flatpak(Desktop):
    def open(self, urls):
        return self.run_opener(
            {'cmd': 'gdbus',
             'exec': ['gdbus', 'call', '--session',
                      '--dest', 'org.freedesktop.portal.Desktop',
                      '--object-path', '/org/freedesktop/portal/desktop',
                      '--method', 'org.freedesktop.portal.OpenURI.OpenURI',
                      "", *urls, '{}']}
        )

    @classmethod
    def is_current(cls) -> bool:
        # TODO maybe get 1000 from uid
        xdg_runtime_dir = os.environ.get('XDG_RUNTIME_DIR', '/run/user/1000')
        return os.path.isfile(os.path.join(xdg_runtime_dir, 'flatpak-info'))

class GNOME(Desktop):
    def open(self, urls):
        return self.run_opener(
            {'cmd': 'gio',
             'exec': ['gio', 'open', *urls]},
            {'cmd': 'gvfs-open',
             'exec': ['gvfs-open', *urls]},
            {'cmd': 'gnome-open',
             'exec': ['gnome-open', *urls]},
        )

    @staticmethod
    def is_cinnamon():
        """Check whether this environment is like cinnamon"""
        return xdg_current_desktop() in ['Cinnamon', 'X-Cinnamon']

    @classmethod
    def is_current(cls) -> bool:
        return xdg_current_desktop().startswith('GNOME') or \
            os.environ.get('GNOME_DESKTOP_SESSION_ID') is not None or \
            desktop_session() == 'gnome' or \
            cls.is_cinnamon() or \
            which('gnome-default-applications-properties') is not None or \
            subprocess.run(['dbus-send', '--print-reply', '--dest=org.freedesktop.DBus',
                            '/org/freedesktop/DBus', 'org.freedesktop.DBus.GetNameOwner',
                            'string:org.gnome.SessionManager']).returncode == 0


SUPPORTED_DESKTOP_ENVIRONMENTS = Desktop.__subclasses__()


def detect_desktop(only):
    """Find and return the first desktop environment for which
    `is_current` is True
    """
    logging.info('Checking current desktop environment')
    envs = SUPPORTED_DESKTOP_ENVIRONMENTS
    if only:
        envs = filter(lambda x: x.__name__ in only, envs)

    for de in envs:
        logging.debug('Asserting desktop is: %s', de.__name__)
        if de.is_current():
            logging.info('Found current desktop environment: %s', de.__name__)
            return de
    logging.warning('Failed to find supported desktop environment')
    return None

# ┌──────────────────┐
# │      Opener      │
# └──────────────────┘
#
# The actual main function used for opening URLs.

def xopen(urls, generic_only, only_desktops, *args, **kwargs):
    """Open urls"""
    logging.debug('Got URLs: %s', urls)

    if not generic_only:
        desktop = detect_desktop(only_desktops)
        if desktop is not None:
            return desktop(urls=urls, *args, **kwargs).open(urls)

    return GenericOpener.from_kwargs(*args, **kwargs).open(urls)


if __name__ == '__main__':
    import signal
    import argparse

    signal.signal(signal.SIGINT, lambda: sys.exit(1))  # for ctrl+c

    parser = argparse.ArgumentParser()

    parser.add_argument('urls', metavar='URLs', nargs='+',
                        help='Path to file or URL to open')
    parser.add_argument('-l', '--log-level', metavar='LEVEL',
                        type=lambda x: getattr(logging, x.upper()),
                        help='Set verbosity of logging output')
    parser.add_argument('-i', '--interactive', action='store_true',
                        help='When supported, use message boxes and other native notifications')
    desktop_names = [x.__name__ for x in SUPPORTED_DESKTOP_ENVIRONMENTS]
    parser.add_argument('-d', '--desktop',
                        dest='only_desktops', nargs='+',
                        metavar='DESKTOP', choices=desktop_names,
                        help='Only check the given desktop environments. Supported options are: ' + json.dumps(desktop_names))
    parser.add_argument('-g', '--generic',
                        dest='generic_only', action='store_true',
                        help="Don't bother checking desktop environments at all")
    pargs = parser.parse_args()
    vargs = vars(pargs)

    # TODO move these to a configuration file
    vargs['list_files'] = ['mimeapps.list', 'defaults.list']
    vargs['search_order'] = [DesktopFindSearchOrder.LIST_FILES,
                             DesktopFindSearchOrder.DESKTOP_FP]
    vargs['paths'] = [os.path.expanduser('~/.local/share/applications/'),
                      '/usr/share/applications/',
                      '/usr/local/share/applications/']

    level = vargs.pop('log_level')
    try:
        from mohkale.pylog.config import use_config as use_logging_config
    except ImportError:
        logging.basicConfig(level=level)
    else:
        use_logging_config('xopen', level=level)

    sys.exit(0 if xopen(**vargs) else 1)
