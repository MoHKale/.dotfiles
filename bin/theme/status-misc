#!/usr/bin/env python3
"""
Theme script combining segments from various smaller scripts into a single
segment. This is useful for repurposing a single Python runtime for multiple
status line segments.
"""

import argparse
import asyncio
import importlib
import logging
import os
import pathlib
import sys
from typing import Optional

from lib.shared import async_print_loop
from lib.status_misc import StatusMiscSegment, shared_arguments

# Load scripts defining status-misc segments.
for _module_name, _file_name in (
    ("status_misc.battery_life", "battery-life"),
    ("status_misc.disk_free", "disk-free"),
    ("status_misc.docker", "docker"),
    ("status_misc.github_notifications", "github-notifications"),
    ("status_misc.mpd_playback", "mpd-playback"),
    ("status_misc.mullvad_vpn", "mullvad-vpn"),
    ("status_misc.nordvpn", "nordvpn"),
    ("status_misc.notmuch", "notmuch"),
    ("status_misc.transmission", "transmission"),
):
    # pylint: disable=deprecated-method,no-value-for-parameter
    importlib.machinery.SourceFileLoader(
        _module_name, os.path.join(os.path.dirname(__file__), "theme-" + _file_name)
    ).load_module()
    # _spec = importlib.util.spec_from_loader(
    #     _module_name,
    #     importlib.machinery.SourceFileLoader(
    #         _module_name, os.path.join(os.path.dirname(__file__), _file_name)
    #     ),
    # )
    # _module = importlib.util.module_from_spec(_spec)
    # _spec.loader.exec_module(_module)


async def main(args: argparse.Namespace) -> None:
    """Run status-misc."""
    status_lock = asyncio.Lock()
    change_event = asyncio.Event()
    statuses = [None] * len(args.enabled)
    value_ptr = [""]

    # This needs to be wrapped because i will be a cell-variable.
    def segment_callback(i: int):
        async def implementation(result: Optional[str]) -> None:
            async with status_lock:
                if statuses[i] != result:
                    logging.debug(
                        "Updating value of segment=%s to value=%s",
                        args.enabled[i].name,
                        repr(result),
                    )
                    statuses[i] = result
                    line = args.sep.join(msg for msg in statuses if msg)
                    if line:
                        line = line + args.suffix
                    value_ptr[0] = line
                    change_event.set()

        return implementation

    tasks = []
    for i, segment in enumerate(args.enabled):
        logging.info("Activating segment %s", segment.name)
        tasks.append(asyncio.create_task(segment.run(segment_callback(i))))

    # This is safe because we technically have a lock on statuses until the
    # `print_loop` blocks and returns control to the async runtime.
    await asyncio.create_task(async_print_loop(value_ptr, change_event, args.unbuffer))

    for task in tasks:
        task.cancel()


if __name__ == "__main__":
    SEGMENTS = {x.name: x for x in StatusMiscSegment.__subclasses__()}

    def parse_args() -> argparse.Namespace:
        """Parse command line arguments."""
        parser = argparse.ArgumentParser()

        # NOTE: The orders of these determines order in output.
        parser.add_argument(
            "--enable",
            metavar="SEGMENT",
            action="append",
            default=[],
            dest="enabled",
            help="Enable a segment, one of: " + ", ".join(SEGMENTS.keys()),
        )

        parser.add_argument(
            "--disable",
            metavar="SEGMENT",
            help="Disable a segment, one of those from --enable.",
        )

        parser.add_argument(
            "--sep",
            metavar="STRING",
            default=" ",
            help="Concatenate status indicators with STRING",
        )
        parser.add_argument(
            "--log-file",
            metavar="FILE",
            type=pathlib.Path,
            help="Log file to dump log output to.",
        )

        shared_arguments(parser)

        for segment in StatusMiscSegment.__subclasses__():
            # pylint: disable=undefined-loop-variable
            segment.parser_args(
                parser, lambda i, segment_name=segment.name: f"--{segment_name}-{i}"
            )

        args = parser.parse_args()

        log_kwargs = {"level": args.log_level}
        if args.log_file:
            log_kwargs["filename"] = str(args.log_file)
        else:
            log_kwargs["stream"] = sys.stdout
        logging.basicConfig(**log_kwargs)

        for i, segment in enumerate(args.enabled):
            if segment not in SEGMENTS:
                parser.error(f"Unknown status-line segment enabled: {segment}")
            args.enabled[i] = SEGMENTS[segment](args)

        return args

    try:
        asyncio.run(main(parse_args()))
    except KeyboardInterrupt:
        sys.exit(1)
