#!/usr/bin/env python3
"""
Theme segment for Docker containers.

This file defines a status line segment for inspecting the number and status
of running docker containers. It outputs a docker icon and then one or more
numbers comprising the total running container count. The form of the count
can be just XX if there are no paused, exited or dead containers. Otherwise
it will be XX/ZZ (with ZZ being the total container count and XX being just
the running ones). You can also optionally highlight any containers with
another status outputted of the form XX+YY/ZZ. If you configure docker to show
containers with all statuses or the sum of all the statuses that were printed,
then summary count will be ommited.
"""
# pylint: disable=no-member,access-member-before-definition

import enum
import logging
from collections import Counter
from distutils.spawn import find_executable as which
from typing import Callable

from lib.shared import run_process
from lib.status_misc.segment import StatusMiscSegment


class DockerStatus(enum.Enum):
    """See https://github.com/moby/moby/blob/b44b5bbc8ba48f50343602a21e7d44c017c1e23d/container/state.go#L74"""

    PAUSED = "paused"
    RESTARTING = "restarting"
    RUNNING = "running"
    DEAD = "dead"
    CREATED = "created"
    EXITED = "exited"


class DockerSegment(StatusMiscSegment):
    """Status line segment showing number of running docker containers."""

    name = "docker"
    sleep_time = 30

    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

        if not self.status:
            self.status = ["running"]

        try:
            self.status = [DockerStatus[it.upper()] for it in self.status]
        except KeyError as err:
            raise ValueError(f"Invalid docker status: {err}") from err

        try:
            self.status_style = {
                DockerStatus[key.upper()]: value
                for key, value in (self.status_style or tuple())
            }
        except KeyError as err:
            raise ValueError(f"Invalid docker status: {err}") from err

    @classmethod
    def parser_args(
        cls, parser: "argparse.ArgumentParser", flag: Callable[[str], str]
    ) -> None:
        docker_group = parser.add_argument_group("Docker Containers")
        super().parser_args(docker_group, flag)

        docker_group.add_argument(
            flag("icon"),
            default="D",
            metavar="ICON",
            help="Icon shown to indicate docker status.",
        )
        docker_group.add_argument(
            flag("icon-style"),
            default="",
            metavar="STYLE",
            help="Styling for docker icon.",
        )

        docker_group.add_argument(
            flag("format"),
            default="{:02d}",
            help="Format string for docker status counts.",
        )

        docker_group.add_argument(
            flag("status"),
            metavar="STATUS",
            nargs="+",
            choices=[it.name for it in DockerStatus],
            help="Include containers with status in output (default to just running).",
        )
        docker_group.add_argument(
            flag("status-style"),
            nargs=2,
            action="append",
            metavar="STATUS STYLE",
            help="Set the STYLE to use for displaying STATUS counts.",
        )

        docker_group.add_argument(
            flag("total-style"),
            default="",
            metavar="STYLE",
            help="Styling for docker summary count.",
        )

        docker_group.add_argument(
            flag("hide-zero"),
            action="store_true",
            help="When true don't show anything if no containers are running",
        )

    # pylint: disable=invalid-overridden-method
    async def render(self) -> str:
        if not which("docker"):
            logging.debug(
                "Skipping segment=%s because docker is not installed.", self.name
            )
            return None
        returncode, stdout, _stderr = await run_process(
            ["docker", "ps", "--all", "--format", "{{.State}}"],
            encoding="ascii",
        )
        if returncode != 0:
            logging.debug(
                "Warning failed to run docker process for segment=%s", self.name
            )
            return None
        counts = Counter(it for it in stdout.split("\n") if it)
        count_total = sum(counts.values())
        if count_total == 0 and self.hide_zero:
            return None

        result = ""
        if self.icon:
            result += self._style(self.icon, self.icon_style) + " "

        count_strings = []
        status_total = 0
        for status in self.status:
            count = counts[status.value]
            if count == 0 and self.hide_zero:
                continue
            count_strings.append(
                self._style(
                    self.format.format(count), self.status_style.get(status, "")
                )
            )
            status_total += count
        if count_strings:
            result += "+".join(count_strings)
        if status_total != count_total:
            if count_strings:
                result += "/"
            result += self._style(self.format.format(count_total), self.total_style)
        return result


if __name__ == "__main__":
    DockerSegment.main()
