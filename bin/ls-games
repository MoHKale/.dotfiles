#!/usr/bin/env python3
"""
List playable games available on this host

This script uses an [[https://github.com/edn-format/edn][edn]] style configuration file to list available games.
The default output of this script is a list of JSON objects including the
name of a game and a URL you can run to play the game. It also supports a
*prettier* PASSWD style output format with ANSI colors (beginning with the
URL).

WARN: The pretty output format begins with the URL and uses : as a delimter
so the URL is actually the first two fields of the output.
eg: "file://foo/:Foo" has a first field of "file" and a second of "//foo/"
whereas the URL to run the game Foo is "file://foo/".

The configuration file should contain a hash containing a :env key for the
list of environment variables you can substitute into various paths and
:games for the list of games available.
The following EDN tags are available to make configuration more straightforward:
+------------------+----------+----------------------------------+
|       Tag        | Argument | Description                      |
+------------------+----------+----------------------------------+
|  #game/set-env   |   MAP    | Assign all the environment       |
|                  |          | variables in MAP to the current  |
|                  |          | processes environment.           |
+------------------+----------+----------------------------------+
|   #game/expand   |   STR    | Replace STR with the value of    |
|                  |          | string after sending through     |
|                  |          | envsubst.                        |
+------------------+----------+----------------------------------+
| #game/load-games |   STR    | Load games from the file at STR. |
|                  |          | This file should contain a list  |
|                  |          | of :games entries.               |
+------------------+----------+----------------------------------+
|    #game/find    |   GLOB   | Run GLOB from the cwd to find a  |
|                  |          | list of game files.              |
+------------------+----------+----------------------------------+

Each :game entry should be a map containing a:
+--------+--------------------+-------------------------------+
|  Key   |        Type        |          Description          |
+--------+--------------------+-------------------------------+
| :name  |        str         | The name of this game         |
+--------+--------------------+-------------------------------+
| :cover |  str or list[str]  | Path to cover images for the  |
|        |                    |             game              |
+--------+--------------------+-------------------------------+
| :meta  |  str or list[str]  | Misc meta-data about the game |
+--------+--------------------+-------------------------------+

Alongside this each :game entry should contain one or more of the following
keys so that ls-games knows how to build a URL to run the game.
* :file (str) the path to a file you can open (eg: using xopen)
* :epic (str) the epic games ID (url slug) for this game
* :gog (str) the GOG games id (url slug) for this game
* :steam (str) the steam application id for this game

NOTE: Because :epic and :gog clients don't have URL openers, you must also
specify a :file field for them pointing to where they've been installed.
Otherwise ls-games will just give you the URL to open the game page.

Furthermore each of the above can be defined as a map, in which case each
entry in the map will get a copy of the current games config with the
appropriate field (:file/:steam etc.) being replaced with the value of a
map entry and the key of the map entry being added to :meta.
For example:
  {:name "Foo"
   :file {:main "file1"
          :bar "file2"}}
results in the following entries being produced:
  {:name "Foo" :file "file1"}
  {:name "Foo" :file "file2" :meta ("bar")}
"""

import os
import sys
import glob
import json
import logging
import pathlib
import dataclasses
import functools
import typing as t
import edn_format as edn
from mohkale.edn import process_edn

DEFAULT_CONFIG = pathlib.Path(os.environ.get('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))) / 'games.edn'


class Steam(object):
    """Utilities for accessing game metadata stored by steam.
    """

    @staticmethod
    @functools.lru_cache()
    def root() -> t.Optional[pathlib.Path]:
        """Get the path to the root steam configuration directory of this platform
        if it exists.
        """
        # List of directories that may be the root of the steam configuration
        for d in (pathlib.Path('~/.local/share/Steam').expanduser(),):
            logging.debug('Checking for steam root at: %s', d)
            if d.exists() and d.is_dir():
                return d
        return None

    @classmethod
    def minutes_played(cls, steam_id) -> t.Optional[str]:
        """How many minutes I've played the game with id `steam_id`.
        """
        root = cls.root()
        if not root:
            return None
        lc = root.glob(f'userdata/*/config/librarycache/{steam_id}.json')
        try:
            lc = next(lc)
        except StopIteration:
            return None
        try:
            stats = json.load(lc.open('r'))
        except json.decoder.JSONDecodeError:
            return None
        for key, obj in stats:
            if key != 'friends':
                continue
            my_data = obj.get('data', {}).get('your_info', {})
            minutes = my_data.get('minutes_played_forever', my_data.get('minutes_played', None))
            if minutes:
                return f'{minutes} minutes played'
        return None


# pylint: disable=too-many-instance-attributes
@dataclasses.dataclass
class Game(object):
    """A game.

    Includes enough information about a game to list it and produce a URL
    that can open or install the game.
    """
    name: str
    cover: t.List[str] = dataclasses.field(default_factory=list)
    _meta: t.List[str] = dataclasses.field(default_factory=list)
    # Specify how to run game
    file: t.Optional[str] = None
    gog: t.Optional[str] = None
    epic: t.Optional[str] = None
    steam: t.Optional[id] = None
    vndb: t.Optional[str] = None

    def __post_init__(self):
        """Update the fields of the current game by expanding any path variables
        and converting any standalone fields that should be collections into a
        list containing that single entry.
        """
        if not isinstance(self._meta, list):
            self._meta = [self._meta]
        if not isinstance(self.cover, list):
            self.cover = [self.cover]
        if self.file:
            self.file = os.path.expandvars(self.file)
        self.cover = [os.path.expandvars(x) for x in self.cover]

    @property
    def url(self):
        """The url (file or store or application) to open this game.
        """

        # These each don't have a predictable install location and the client doesn't support
        # a run-this-game URL so we have to keep both a source slug and a file URL for it.
        #
        # When the file does not exist all we can do is open the store page for the game so
        # the user can then install it (and maybe then tell us where to find it).
        for url_f, field in {'https://www.gog.com/game/%s': self.gog,
                             'https://www.epicgames.com/store/en-US/product/%s/home': self.epic}.items():
            if field and (not self.file or os.path.exists(self.file)):
                return url_f.format(field)
        if self.file:
            for path in self._iter_file_paths():
                if os.path.exists(path):
                    return f'file://{path}'
            logging.warning('File for game not found: %s', self.file)
            return f'file://{self.file}'
        if self.steam:
            return f'steam://run/{self.steam}'
        raise ValueError('Game initialised with no method to run', repr(self.name))

    def _iter_file_paths(self):
        yield self.file
        for p in pathlib.Path(self.file).parents:
            for ftype in ('.7z', ):
                yield p.parent / (p.name + ftype)

    def pretty(self):
        """Pretty print this game url.
        """
        meta = ' '.join(self.meta) if self.meta else ''
        return f'{self.url}:{self.name}' + (f' [\033[0;32m{meta}\033[0m]' if meta else '')

    @property
    def meta(self):
        """Metadata tied to the current game.
        """
        m = self._meta
        if self.steam:
            sm = Steam.minutes_played(self.steam)
            if sm:
                m = [*m, sm]
        return m

    @classmethod
    def enumerate_games(cls, obj):
        """Enumerate a :games configuration, yielding Game insance.
        """
        if isinstance(obj, (list, tuple)):
            for subobj in obj:
                yield from filter(lambda x: x is not None, cls.enumerate_games(subobj))
            return []

        props = None
        for key in ('epic', 'gog', 'file', 'steam'):  # possible permutation attributes
            if key in obj:
                props = obj.pop(key)
                break
        else:
            logging.warning('Encountered game with no file or steam field')
            return None
        if not isinstance(props, dict):
            props = {'main': props}

        meta = obj.pop('meta', [])
        for new_meta, value in props.items():
            yield cls(**obj,
                      **{key: value},
                      _meta=meta if new_meta == 'main' else [*meta, new_meta])


def _edntag_find(pattern):
    arr = []
    for path in glob.glob(pattern):
        _, ext = os.path.splitext(path)
        arr.append({'name': os.path.basename(path)[:-len(ext)],
                    'file': os.path.join(os.getcwd(), path)})
    return arr


def _edntag_load(path):
    if not os.path.exists(path):
        logging.error('Failed to load games from file at path: %s', path)
        return []

    cwd = os.getcwd()
    _dir = os.path.dirname(path)
    try:
        if _dir != '':
            os.chdir(_dir)
        with open(path, 'r') as fd:
            return edn.loads(fd.read(), debug=False)
    finally:
        os.chdir(cwd)


def _edntag_setenv(obj):
    os.environ.update(obj)
    return obj


edn.add_tag('game/load-games', _edntag_load)
edn.add_tag('game/set-env', _edntag_setenv)
edn.add_tag('game/find', _edntag_find)
edn.add_tag('game/expand', os.path.expandvars)


def main(args):
    """List games.
    """
    conf = process_edn(_edntag_load(str(args.config)))
    games = Game.enumerate_games(conf.get('games', []))

    ok = True
    if args.cmd == 'doctor':
        for game in games:
            if game.file and not os.path.exists(game.file):
                ok = True
                logging.error('Failed to find file for game %s: %s', repr(game.name), game.file)
            for cover in game.cover:
                if not os.path.exists(cover):
                    ok = True
                    logging.error('Missing cover image for game %s: %s', repr(game.name), cover)
        return ok

    for g in games:
        print(args.output(g))
    return ok


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()

    sp_gen = parser.add_subparsers(dest='cmd')
    sp_gen.add_parser('doctor', help='Check your current configuration is upto date')

    parser.add_argument('-p', '--prettify', dest='output',
                        action='store_const', const=Game.pretty,
                        help='Pretty print output rather than using json')
    parser.add_argument('-c', '--config',
                        type=pathlib.Path, default=DEFAULT_CONFIG,
                        help='Specify local game configuration file')
    parser.add_argument('-l', '--log-level', metavar='LEVEL',
                        type=lambda x: getattr(logging, x.upper()),
                        help='Set verbosity of logging output')

    args = parser.parse_args()
    vargs = vars(args)
    args.output = args.output or (lambda g: json.dumps({'name': g.name, 'url': g.url, 'meta': g.meta}))

    level = vargs.pop('log_level')
    try:
        from mohkale.pylog.config import use_config as use_logging_config
    except ImportError:
        logging.basicConfig(level=level)
    else:
        use_logging_config('ls-games', vargs.pop('log_level'))

    if not args.config.exists():
        parser.error('Failed to find config file: %s' % args.config)
    logging.getLogger('edn_format').setLevel(logging.ERROR)
    sys.exit(0 if main(args) else 1)
