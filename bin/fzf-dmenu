#!/usr/bin/sh
# interactively select program to execute using fzf. [[https://github.com/oem/dotfiles/blob/master/launch/cmdlist][source]].

print_usage() {
  echo "Usage: $0 [-h] [-a] [-d] [-H]"
  echo ""
  echo "interactively select and execute (multiple) programs with fzf"
  echo ""
  echo "Options:"
  echo " -h    print this help message and exit"
  echo " -a    offer to complete all executables in PATH"
  echo "       not just those with know .desktop entries"
  echo " -d    run in debug mode, produces extra output"
  echo " -H    hide desktop files from fzf display"
}

all=0 debug=0 hide_dfile=0
while getopts 'hHad' OPTION; do
  case "$OPTION" in
    h) print_usage
       exit 0 ;;
    a) all=1
       ;;
    d) debug=1
       ;;
    H) hide_dfile=1
       ;;
    \?) print_usage >&2
        exit 0 ;;
  esac
done

fzf_command() {
  sort -u | fzf --reverse --border --multi "$@"
}

# format a command line to be run asynchronously and not be interrupted
# when it's parent process group exits. Like [[https://github.com/oem/lnch/blob/master/main.go][lnch]] except written in pure
# shell and with no external dependencies..
lnch() {
  if [ "$debug" -eq 1 ]; then tee /dev/tty; else cat; fi |
    xargs -d '\n' -r -n1 nohup sh -c >/dev/null 2>&1 & disown
}

list_all() {
  echo "$PATH" | 2>/dev/null \
    xargs -d: -I {} -r -- \
      find -L {} -maxdepth 1 -mindepth 1 -type f -executable -printf '%P\n'
}

# list all desktop files and the program names associated with them.
# in a PATH like format (: delimeted).
list_desktop_entries() {
  # shellcheck disable=SC2038
  find "${XDG_DATA_HOME:-$HOME/.local/share}/applications"       \
       "/usr/share/applications" "/usr/local/share/applications" \
       -iname '*.desktop' -exec grep -l 'Type=Application' {} + -print 2>/dev/null |
    xargs -r -d '\n' grep -m1 -io '^name=\(.\+\)$' |
    sed -e 's/:Name=/:/' -e 's/\(.\+\):\(.\+\)/\2:\1/'
}

if [ "$all" -eq 1 ]; then
  list_all | fzf_command | lnch
else
  sep=$(printf "\t")
  list_desktop_entries |
    if hash column 2>/dev/null; then column -t -s : -o "$sep"; else tr ':' "$sep"; fi |
    if [ "$hide_dfile" -eq 1 ]; then
        fzf_command -d "$sep" --with-nth 1
    else
        fzf_command
    fi |
    sed 's/.\+\t\(.\+\)/\1/' |
    awk -e '{ printf("xrun %s\n", $0) }' |
    lnch
fi

if [ "$debug" -eq 1 -o "$?" -ne 0 ]; then
  printf "%s" "fzf-dmenu: exited with non 0 exit code, press enter to continue:"
  read -r
fi
