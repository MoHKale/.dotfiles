#!/usr/bin/env bash
# -*- +indent: 2 -*-
# Recursively find all executable scripts and match their interpreters
# to different linters and produce GCC compatible linting output.

print_usage() {
  echo "Usage: $(basename "$0") [-h] [-v] [-d] PATH"
}
print_help() {
  print_usage
  cat <<-EOF

Optional Arguments:
  -h    Show this help message and exit
  -v    Include debugging output for unmatched mimetypes.
  -d    Don't run linters, just output the cmd lines that
        would be run.
EOF
}

root="$DOTFILES" verbose=0 dry_run=0
while getopts 'hvd' OPTION; do
  case "$OPTION" in
    \?) print_usage >&2
        exit 1 ;;
    h) print_help
       exit 0 ;;
    v) verbose=1 ;;
    d) dry_run=1 ;;
  esac
done
shift $((OPTIND - 1))

[ -n "$*" ] && root="$*"
if [ -z "$root" ]; then
  echo "lint: error: no dotfile repository root directory found" >&2
  exit 1
elif ! [ -r "$root" ]; then
  echo "lint: error: dotfile repository root not found: $root" >&2
  exit 1
fi

if command -v parallel >/dev/null 2>&1; then
  batch_str="parallel -r -d '\n' -X --line-buffer --quote --max-procs 1"
  [ "$dry_run" -eq 1 ] && batch_str="$batch_str --dry-run"
else
  batch_str="xargs -r -d '\n'"
  [ "$dry_run" -eq 1 ] && batch_str="$batch_str echo"
fi

exit=0

cd "$root" || exit 1
ignore=$(tr '\n' : < ./setup/conf/lint.ignore)
./bin/project-files -f |
  while read -r f; do
    # See [[https://stackoverflow.com/a/61545396/6247387][here]]
    if ! [[ "$ignore" =~ ^$f:|:$f:|:$f$ ]]; then
      echo "$f"
    fi
  done |
  xargs -r -d '\n' file --dereference --mime-type -- |
  awk -F ': *' \
      -v shell_lint='
  # Annoyingly shellcheck treats warnings as errors (in regards to
  # the exit code) but I only want failures on errors. Not warnings.
  '"$batch_str"' shellcheck -x -f gcc --exclude SC1091,SC1090 |
    awk -F : -e '"'"'
{
  if (code == 0) {
    level = $4
    sub(/^[ \t]+/, "", level)
    code = (level == "error") ? 1 : 0
  }
  out=$1
  for (i=2; i <= NF; i++) {
    out = out FS $i
  }
  print(out)
}'"'"' -e '"'"'END { exit(code) }'"'"'' \
      -v python_lint="
  $batch_str pylint --rcfile setup/conf/pylintrc --msg-template='{path}:{line}:{column}: {category}: {msg} [{symbol} {msg_id}]' --disable C0103,R0801,E0401 --reports n --score n
" \
      -v ruby_lint="
  $batch_str rubocop -f emacs --config setup/conf/rubocoprc
" \
      -v json_lint="
  $batch_str jsonlint --quiet
" \
      -v yaml_lint="
  $batch_str yamllint -f parsable -c setup/conf/yamlrc | sed -e 's/\\\\[\\\\([^ ]*\\\\)\\\\]/\\\\1/'
" \
    -v md_lint="
  $batch_str mdl -s  setup/conf/mdlstyle.rb
" \
      -v verbose="$verbose" \
      -e 'END {
  codes["shell"] = shell_lint
  codes["python"] = python_lint
  codes["ruby"] = ruby_lint
  codes["json"] = json_lint
  codes["yaml"] = yaml_lint
  codes["markdown"] = md_lint

  for (key in codes) {
    code = close(codes[key])
    exit_code = code
    # See [[https://www.gnu.org/software/gawk/manual/html_node/Close-Files-And-Pipes.html][awk-pipes]]
    if (code < 0 || code > 255) {
      exit_code = 1
    }

    if (exit_code != 0) {
      print("lint: error: Linter program for " key " exited with non-zero code " code)
      exit(exit_code)
    }
  }
}' \
      -e '{
  switch ($2) {
  case /x-sh(ellscript)?/:
    print $1 | shell_lint
    break
  case /x-.*python/:
    print $1 | python_lint
    break
  case /x-ruby$/:
    print $1 | ruby_lint
    break
  case /json$/:
    print $1 | json_lint
    break
  case /yaml$/:
    print $1 | yaml_lint
    break
  case /markdown$/:
    print $1 | md_lint
    break
  case /^text\/plain$/:
    # Mime checkup failed, lets try a filepath match instead.
    found = 1
    switch ($1) {
      # Ideally your computer should have a mimetype setup for
      # this but seeing as mine doesnt I have to use this hack
      case /\.yml$/:
        print $1 | yaml_lint
        break
      case /\.md$|\.markdown$/:
        print $1 | md_lint
        break
      case /core\/autoload\/cmds\//:
        print $1 | shell_lint
        break
      default:
        found = 0
    }
    if (found)
      break # only break when linter found, otherwise try default.
  default:
    if (verbose)
      print("lint: error: unknown interpreter for linting (" $2 ") at path: " $1)
  }
}
' || exit=1

# Also list broken symlinks as errors.
while IFS=: read -r src dest; do
  echo "$src: error: non-existant symlink $dest"
  exit=1
done < <(./bin/broken-links | grep -v --fixed-strings --file ./setup/conf/lint.ignore)

exit "$exit"
