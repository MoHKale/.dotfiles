# -*- mode: sh -*- shell agnostic environment setup file.

#      _          _ _                    _                                      _
#  ___| |__   ___| | |    ___ _ ____   _(_)_ __ ___  _ __  _ __ ___   ___ _ __ | |_
# / __| '_ \ / _ \ | |   / _ \ '_ \ \ / / | '__/ _ \| '_ \| '_ ` _ \ / _ \ '_ \| __|
# \__ \ | | |  __/ | |  |  __/ | | \ V /| | | | (_) | | | | | | | | |  __/ | | | |_
# |___/_| |_|\___|_|_|___\___|_| |_|\_/ |_|_|  \___/|_| |_|_| |_| |_|\___|_| |_|\__|
#                   |_____|

# don't source this script if you've already sourced it.
[ -z "$SOURCED_SHENV" ] || return

[ -f "$HOME/.config/user-dirs.dirs" ] && . "$HOME/.config/user-dirs.dirs"
export XDG_CONFIG_HOME XDG_DATA_HOME XDG_CACHE_HOME XDG_DOCUMENTS_DIR

case "$TERM" in
    dumb)
        PS1="> " # dumb terminal used by emacs tramp
        ;;
    xterm*|rxvt*|eterm*|screen*|cygwin*|emacs*|st*)
        SMART_TERM=1 ;;
    *) SMART_TERM=0 ;;
esac

case "$(ps -p $$ | awk 'END { print($NF) }')" in
    *bash) shell="bash"   ;;
    *zsh)  shell="zshell" ;;
    *)     shell=         ;;
esac

# prioritize editors in order of nvim, vim, vi.
if   hash nvim 2>&1; then export EDITOR=nvim
elif hash vim  2>&1; then export EDITOR=vim
else                      export EDITOR=vi
fi

# source XDG compatibility environment files
[ -r "$HOME/.config/xdg" ] && . "$HOME/.config/xdg"

export VISUAL="$EDITOR"
export PAGER=less
export LESS="-R -i --save-marks -x4"
export DOTFILES_REPO_PATH=$HOME/.dotfiles
export TMUX_HOME=$XDG_CONFIG_HOME/tmux
export TMUX_TMPDIR=$XDG_CACHE_HOME/tmux
export LANG=en_GB.UTF-8 LC_MESSAGES="C"
export MANPATH=$XDG_DATA_HOME/man:$MANPATH
export MANPAGER='less -s -M +Gg'
export INFOPATH=$XDG_DATA_HOME/info:$INFOPATH
# shell used by emacs for various shell like purposes
export ESHELL="$(which bash 2>/dev/null || echo /bin/sh)"

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# colorize less pager, format is red, green & white.
# NOTE bold=1 but only works with colors in the range 90+
export LESS_TERMCAP_mb=$'\e[1;91m' # begin blinking
export LESS_TERMCAP_md=$'\e[1;91m' # begin bold
export LESS_TERMCAP_me=$'\e[0m'    # end mode
export LESS_TERMCAP_se=$'\e[0m'    # end standout-mode
export LESS_TERMCAP_ue=$'\e[0m'    # end underline
export LESS_TERMCAP_us=$'\e[1;32m' # begin underline
export LESS_TERMCAP_so=$'\e[36m'   # begin standout-mode - info box

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ] && [ -r "$XDG_CONFIG_HOME/dircolors" ]; then
    eval "$(dircolors -b $XDG_CONFIG_HOME/dircolors)" || eval "$(dircolors -b)"
fi

if [ -e "$XDG_CONFIG_HOME/diricons" ]; then
    # load icons from human readable config file.
    export LF_ICONS=$(sed ~/.config/diricons \
                      -e '/^[ \t]*#/d'       \
                      -e '/^[ \t]*$/d'       \
                      -e 's/[ \t]\+/=/g'     \
                      -e 's/$/ /' | tr '\n' ':')
fi

# Prevents Error Message with Python Encoding
export PYTHONIOENCODING="utf-8"

SAVEHIST=1000 HISTSIZE=1000 HISTFILESIZE=2000

# set terminal used by i3
export TERMINAL="st"

# disable telemetary and tracking when possible, see [[https://consoledonottrack.com/][do-not-track]].
export \
    HOMEBREW_NO_ANALYTICS=1               \
    SAM_CLI_TELEMETRY=0                   \
    AZURE_CORE_COLLECT_TELEMETRY=0        \
    DO_NOT_TRACK=1                        \
    STRIPE_CLI_TELEMETRY_OPTOUT=1         \
    GATSBY_TELEMETRY_DISABLED=1           \
    HASURA_GRAPHQL_ENABLE_TELEMETRY=false \
    DOTNET_CLI_TELEMETRY_OPTOUT=true      \
    NEXT_TELEMETRY_DISABLED=1             \
    AUTOMATEDLAB_TELEMETRY_OPTOUT=1       \
    POWERSHELL_TELEMETRY_OPTOUT=1

# set path based variables
lines_to_path() { #(PATH [...PATH])
    # converts a list of paths into a PATH like string sequence,
    # with support for comments and auto removal of empty lines.

    # NOTE trailing whitespace is automatically removed with
    #      inline comments.

    # strip out empty lines, comments, replace ~/ with users home
    # directory & join paths with a :.
    sed -e 's/ *#.*$//g'          \
        -e '/^ *$/d'              \
        -e 's ^~/ '"${HOME}"/' g' \
        -e 's/$/:/' | tr -d '\n'

    if [ -n "$1" ]; then
        # print existing path variables when given in linux path format.
        # printf ":" # delimit the existing
        case "$OSTYPE" in
            *cygwin|*msys)
                printf "%s:" "$(cygpath --path "$*")"
                ;;
            *)
                printf "%s:" "$*"
                ;;
        esac
    fi
}

export PATH=`lines_to_path $PATH <<EOF
~/.local/bin/
~/programming/scripts
~/programming/.modules/ruby/bin
~/programming/.modules/go/bin
$XDG_DATA_HOME/npm/bin
~/.rvm/bin
${POETRY_HOME:-$HOME/.poetry}/bin
EOF`

export CLASSPATH=`lines_to_path "$CLASSPATH" <<EOF
.
# WARN you need to specify both the directory with
#      wildcards to reference JARs and without them
#      for finding classes from that directory.
# WARN for some dumb reason... java & javac just
#      completely ignore this environment variable
#      when you pass the -cp argument.
~/programming/.modules/java/
~/programming/.modules/java/*
EOF`

export PYTHONPATH=`lines_to_path "$PYTHONPATH" <<EOF
~/programming/.modules/python
EOF`

export GEM_HOME=$HOME/programming/.modules/ruby
export GEM_PATH=`lines_to_path "$GEM_PATH" <<EOF
$GEM_HOME
EOF`

export GOPATH=`lines_to_path $GOPATH <<EOF
~/programming/.modules/go
EOF`

export NODE_PATH=`lines_to_path $NODE_PATH <<EOF
~/programming/.modules/node
/usr/lib/nodejs
/usr/share/nodejs
EOF`

platform="$(ls-platform)"
[ -z "$platform" ] && echo "warning: shenv: unknown OS type: $OSTYPE" >&2

if [ "$platform" = "windows" ]; then
    for path_var in CLASSPATH PYTHONPATH; do
        # for programs that don't care about the environment,
        # only about the OS, convert paths back to a windows
        # like path.

        export $path_var=$(cygpath --windows --path "${!path_var}")
    done

    export GEM_HOME=$(cygpath --mixed "$GEM_HOME")

    # assume it's the only platform using the TCP file.
    export EMACS_SERVER_FILE="$EMACS_HOME/var/server/server"

    # proper symlinks, not that wibbly wobbley copy paste
    export MSYS=winsymlinks:nativestrict

    # fix annoying issues with chocolatey mixing up windows
    # temp variables and msys ones.
    unset tmp temp
fi

unset -f lines_to_path # thank you, good bye

# uses darcula theme from fzf color schemes wiki
export FZF_DEFAULT_OPTS="
    --bind ctrl-j:down
    --bind ctrl-k:up
    --bind ctrl-u:page-up
    --bind ctrl-d:page-down
    --bind alt-u:preview-page-up
    --bind alt-d:preview-page-down
    --bind ctrl-n:preview-down
    --bind ctrl-p:preview-up
    --bind alt-h:backward-word
    --bind alt-l:forward-char
    --bind ctrl-q:jump
    --bind alt-q:jump-accept
    --bind alt-k:accept-non-empty
    --bind alt-j:accept
    --bind alt-return:print-query
    --bind alt-bspace:clear-query
    --bind shift-left:backward-word
    --bind shift-right:forward-word
    --bind ctrl-space:toggle+down
    --bind ctrl-o:top
    --bind ctrl-o:top
    --color dark
    --color fg:-1,bg:-1,hl:#5fff87,fg+:-1,bg+:-1,hl+:#ffaf5f
    --color info:#af87ff,prompt:#5fff87,pointer:#ff87d7,marker:#ff87d7,spinner:#ff87d7
"

# source shortcuts
shortcuts_dir="$XDG_CONFIG_HOME/shortcuts"
[ -f "$shortcuts_dir/shortcuts" ]                         && . "$shortcuts_dir/shortcuts"
[ -n "$shell"    -a -f "$shortcuts_dir/setup/$shell"    ] && . "$shortcuts_dir/setup/$shell"
[ -n "$platform" -a -f "$shortcuts_dir/setup/$platform" ] && . "$shortcuts_dir/setup/$platform"
unset shortcuts_script

# reclaim C-s and C-q
if [ "$SMART_TERM" -eq 1 ]; then
    stty stop  undef 2>/dev/null
    stty start undef 2>/dev/null
fi

# source aliases
case "$-" in
    *i*)
        if which thefuck >/dev/null 2>&1; then
            # honestly I doubt I'll really be using 'the-fuck' but
            # lazy loading it is a near effortless task so why not

            # lazy load 'the fuck' using an alias which evaluates
            # it removes the alias and then runs it for the first
            # time

            alias='fx' # alias under which 'the-fuck' will be invoked... actually a function
            alias $alias='eval $(thefuck --alias '$alias') && unalias '$alias' && '$alias
            unset alias # remove a basically uselass environment variable from the shell
        fi

        eval "$(ls-aliases | xargs -d '\n' -r build-aliases -i1)"
        ;;
esac

unset shell
SOURCED_SHENV=1

# vim:syntax=sh filetype=sh
