#!/usr/bin/env bash
# -*- +indent: 2 -*- Login configuration file.
#                   __ _ _
#  _ __  _ __ ___  / _(_) | ___
# | '_ \| '__/ _ \| |_| | |/ _ \
# | |_) | | | (_) |  _| | |  __/
# | .__/|_|  \___/|_| |_|_|\___|
# |_|
#
# This shell script should be sourced by any shells during login or just
# to initialise the environment for an interactive shell. It will not be
# sourced when running shell scripts or other non-interactive shells.
#
# NOTE: Both ssh and tmux create login shells so this script will be sourced
# by them EVERY time. You may end up in a situation where this script ends up
# being sourced twice which is why there's a header guard in place to avoid
# repeat invocations.

[ "${sourced_profile:-0}" -eq 1 ] && return

[ -r "$HOME/.config/user-dirs.dirs" ] && . "$HOME/.config/user-dirs.dirs"
export XDG_CONFIG_HOME XDG_DATA_HOME XDG_CACHE_HOME XDG_DOCUMENTS_DIR \
       XDG_PICTURES_DIR XDG_MUSIC_DIR XDG_VIDEOS_DIR XDG_DESKTOP_DIR \
       XDG_DOWNLOAD_DIR XDG_TEMP_DIR XDG_GAMES_DIR XDG_DEV_HOME XDG_BIN_DIR \
       XDG_STATE_HOME XDG_RUNTIME_DIR XDG_LIB_DIR

if   hash nvim 2>/dev/null; then export EDITOR=nvim
elif hash vim  2>/dev/null; then export EDITOR=vim
else                             export EDITOR=vi
fi

export VISUAL="$EDITOR"
export PAGER=less
export LESS="-R -S -i --save-marks -x4"
export DOTFILES=$XDG_CONFIG_HOME/dotfiles
export TMUX_HOME=$XDG_CONFIG_HOME/tmux
export TMUX_TMPDIR=$XDG_CACHE_HOME/tmux
export LANG=en_GB.UTF-8 LC_MESSAGES="C"
export MANPATH=$XDG_DATA_HOME/man:$MANPATH
export MANPAGER='less -s -M +Gg'
export MAN_KEEP_FORMATTING=1
export INFOPATH=$XDG_DATA_HOME/info:$INFOPATH
export OPENER='xopen'                                                           # Command used to open files/URLs.
ESHELL="$(command -v bash 2>/dev/null || echo /bin/sh)"; export ESHELL          # Shell used by emacs for various shell like purposes.
export SH_BANNER=0                                                              # Whether to show an ascii art banner on startup.

[ -r "$XDG_CONFIG_HOME/xdg" ] && . "$XDG_CONFIG_HOME/xdg"                       # Source XDG compatibility environment files

# Colorize less pager, format is red, green & white.
LESS_TERMCAP_mb=$(printf '\033[1;91m');  export LESS_TERMCAP_mb                 # Begin blinking
LESS_TERMCAP_md=$(printf '\033[1;91m');  export LESS_TERMCAP_md                 # Begin bold
LESS_TERMCAP_me=$(printf '\033[0m');     export LESS_TERMCAP_me                 # End mode
LESS_TERMCAP_se=$(printf '\033[0m');     export LESS_TERMCAP_se                 # End standout-mode
LESS_TERMCAP_ue=$(printf '\033[0m');     export LESS_TERMCAP_ue                 # End underline
LESS_TERMCAP_us=$(printf '\033[1;32m');  export LESS_TERMCAP_us                 # Begin underline
LESS_TERMCAP_so=$(printf '\033[36m');    export LESS_TERMCAP_so                 # Begin standout-mode - info box

if [ -e "$XDG_CONFIG_HOME/diricons" ]; then
  # Load icons from human readable config file.
  LF_ICONS=$(sed "$XDG_CONFIG_HOME"/diricons \
                 -e '/^[ \t]*#/d'       \
                 -e '/^[ \t]*$/d'       \
                 -e 's/[ \t]\+/=/g'     \
                 -e 's/$/ /')
  LF_ICONS="${LF_ICONS//$'\n'/:}"
  export LF_ICONS
fi

export PYTHONIOENCODING="utf-8"                                                 # Prevents error message with python encoding
export TERMINAL="st"                                                            # Set terminal used by i3

# Disable telemetary and tracking when possible, see [[https://consoledonottrack.com/][do-not-track]].
export \
  HOMEBREW_NO_ANALYTICS=1               \
  SAM_CLI_TELEMETRY=0                   \
  AZURE_CORE_COLLECT_TELEMETRY=0        \
  DO_NOT_TRACK=1                        \
  STRIPE_CLI_TELEMETRY_OPTOUT=1         \
  GATSBY_TELEMETRY_DISABLED=1           \
  HASURA_GRAPHQL_ENABLE_TELEMETRY=false \
  DOTNET_CLI_TELEMETRY_OPTOUT=true      \
  NEXT_TELEMETRY_DISABLED=1             \
  AUTOMATEDLAB_TELEMETRY_OPTOUT=1       \
  POWERSHELL_TELEMETRY_OPTOUT=1

case "$(ps -p $$ | awk 'END { print($NF) }')" in
  *bash) shell="bash"   ;;
  *zsh)  shell="zshell" ;;
  *)     shell=         ;;
esac

lines_to_path() {
  # A helper to quickly declare a bunch of PATH variables from
  # a basic INI like configuration format (supplied through stdin).
  #
  # An environment variable is a section beginning contained in [],
  # comments are specified bash style, and can be interspersed any-
  # where. Any line that's neither a comment nor a section starter
  # is seen as a PATH in the last-most defined section.
  #
  # By default this script checks whether an existing variable matching
  # a section is defined and appends it to the PATH string. You can
  # prefix the variable with a : (eg: [:PATH]) to prevent appending the
  # existing variable.

  # I'm too inexperienced with sed to use only one sed process
  # once I get some more familirarity with it I'll optimise this.
  local conf
  conf=$(sed -e 's/ *#.*$//g'             \
             -e '/^ *$/d'                 \
             -e 's!^~/!'"${HOME}"/'!g'    \
             -e '/^\[.\+\]$/!s/.\+$/\0:/' \
             -e '/^\[.\+\]$/s/.\+/\n\0/' |
         sed -e '/^$/d' \
             -e ': again; /:$/ { N; /\[.\+\]$/!s/:\n/:/; t again }' |
         sed -e '/\[.\+\]/ { N; s/\[\(.\+\)\]\n/\1 / }' \
             -e 's/:$//')

  local var paths existing
  while IFS=' ' read -r var paths; do
    if [ "${var:0:1}" = ":" ]; then
      var="${var:1}" # strip out : prefix.
    else
      case "$shell" in
        zshell) existing=${(P)var} ;;
        bash) existing="${!var}" ;;
        # POSIX compliant but ugly and vulnerable
        *) existing=$(eval "echo \${$var}") ;;
      esac

      if [ -n "$existing" ]; then
        # print existing path variables when given in linux path format.
        case "$OSTYPE" in
          *cygwin|*msys) existing="$(cygpath --path "$existing")" ;;
        esac
      fi

      paths=$paths:$existing
    fi

    export "$var"="${paths}"
  done <<< "$conf"
}

lines_to_path <<EOF
[PATH]
$XDG_BIN_DIR
$XDG_DEV_HOME/scripts
$XDG_LIB_HOME/go/bin
$XDG_LIB_HOME/npm/bin
${GEM_HOME:-$HOME/.gem}/bin
${POETRY_HOME:-$HOME/.poetry}/bin
~/.rvm/bin

[CLASSPATH]
.
# WARN you need to specify both the directory with
#      wildcards to reference JARs and without them
#      for finding classes from that directory.
# WARN for some dumb reason... java & javac just
#      completely ignore this environment variable
#      when you pass the -cp argument.
$XDG_DEV_HOME/.modules/java/
$XDG_DEV_HOME/.modules/java/*

[PYTHONPATH]
$XDG_LIB_HOME/python
$XDG_DEV_HOME/.modules/python

[GEM_PATH]
$GEM_HOME

[GOPATH]
$XDG_LIB_HOME/go

[NODE_PATH]
$XDG_DATA_HOME/npm/lib/node_modules

[:REPO_PATH]
$XDG_DEV_HOME/repos/
$XDG_DEV_HOME/upwork/
$DOTFILES
$XDG_LIB_HOME/go/src/*/*/
$XDG_LIB_HOME/ruby/gems/
EOF

unset -f lines_to_path

case "$(ls-platform)" in
  windows)
    # For programs that don't care about the environment,
    # only about the OS, convert paths back to a windows
    # like path.
    for var in CLASSPATH PYTHONPATH; do
      export "$var"="$(cygpath --windows --path "${!var}")"
    done
    for var in IRBRC SOLARGRAPH_CACHE BUNDLE_USER_CONFIG \
                     BUNDLE_USER_CACHE BUNDLE_USER_PLUGIN; do
      [ -n "$var" ] &&
        export "$var"="$(cygpath --mixed "${!var}")"
    done
    unset var

    # shellcheck disable=SC2155
    export GEM_HOME="$(cygpath --mixed "$GEM_HOME")"

    # Assume it's the only platform using the TCP file.
    export EMACS_SERVER_FILE="$XDG_CONFIG_HOME/emacs/var/server/server"

    # Proper symlinks, not that wibbly-wobbley copy paste.
    export MSYS=winsymlinks:nativestrict

    # Fix annoying issues with chocolatey mixing up windows
    # temp variables and msys ones.
    unset tmp temp
    ;;
esac

# Uses darcula theme from fzf color schemes wiki.
export FZF_DEFAULT_OPTS='
  --bind ctrl-j:down
  --bind ctrl-k:up
  --bind ctrl-u:page-up
  --bind ctrl-d:page-down

  --bind alt-u:preview-page-up
  --bind alt-d:preview-page-down
  --bind ctrl-n:preview-down
  --bind ctrl-p:preview-up
  --bind ctrl-i:toggle-preview
  --bind alt-i:toggle-preview

  --bind shift-left:backward-word
  --bind shift-right:forward-word
  --bind ctrl-b:backward-word
  --bind ctrl-f:forward-word
  --bind ctrl-h:backward-char
  --bind ctrl-l:forward-char

  --bind alt-return:print-query
  --bind alt-bspace:clear-query

  --bind alt-j:accept
  --bind alt-k:accept-non-empty
  --bind alt-q:jump
  --bind ctrl-q:jump-accept

  --bind alt-a:select-all
  --bind alt-x:deselect-all

  --bind "ctrl-y:execute-silent(echo {} | clip)"

  --bind ctrl-s:toggle-search

  --bind ctrl-space:toggle+down
  --bind ctrl-o:top

  --history '"$XDG_STATE_HOME"'/fzf/history/default
  --history-size 1000000
  --bind alt-j:next-history
  --bind alt-k:previous-history

  --color dark
  --color fg:-1,bg:-1,fg+:-1,bg+:-1,hl+:#e93c58,hl:#df5273
  --color info:#af87ff,prompt:#5fff87,pointer:#ff87d7,marker:#ff87d7,spinner:#ff87d7

  --cycle
'

sourced_profile=1
