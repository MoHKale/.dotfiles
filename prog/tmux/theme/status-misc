#!/usr/bin/env python3
"""
Misc sections for my tmux status-line. Here I throw in any status-line elements
I haven't created any dedicated scripts for (... yet).
"""

# TODO: Support custom intervals for each section.

from misc_segments import StatusMiscSegment
from shared import print_loop, render_loop

def status_misc(args):
    """Closure around args continually outputting meta-segments.
    """
    statuses = [x.render for x in args.enable]

    def wrapped():
        msgs = []
        for x in statuses:
            # pylint: disable=unused-variable
            try:
                msgs.append(x())
            except Exception as e:  # pylint: disable=broad-except
                # print(e)
                continue
        msgs = [x for x in msgs if x]
        if msgs:
            return args.sep.join(msgs) + args.suffix
        return ''
    return wrapped


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()

    SEGMENTS = {x.name: x for x in StatusMiscSegment.__subclasses__()}

    parser.add_argument('--suffix',
                        metavar='FORMAT', default='',
                        help='Suffix output with FORMAT.')

    # NOTE: The orders of these determines order in output.
    parser.add_argument('--enable',
                        metavar='SEGMENT', action='append', default=[],
                        help='Enable a segment, one of: ' + ', '.join(SEGMENTS.keys()))

    parser.add_argument('--sep', metavar='STRING', default=' ',
                        help='Concatenate status indicators with STRING')
    parser.add_argument('-r', '--reset-style', default='#[default]',
                        help='Specify style for resetting styles')
    parser.add_argument('-u', '--unbuffer', action='store_true',
                        help='Immeadiately flush output after writing')
    parser.add_argument('-s', '--sleep', type=int,
                        help='When given, wait this duration between outputting')

    for segment in StatusMiscSegment.__subclasses__():
        segment.parser_args(parser)

    args  = parser.parse_args()

    for i, segment in enumerate(args.enable):
        if segment not in SEGMENTS:
            parser.error(f'Unknown segment enabled: {segment}')
        args.enable[i] = SEGMENTS[segment](args)

    try:
        print_loop(render_loop(status_misc(args)), args.unbuffer, args.sleep)
    except KeyboardInterrupt:
        pass
