# -*- mode: conf-space -*-

set-window-option -g mode-keys vi
# bash like bindings in command prompt
set-window-option -g status-keys emacs
set -g mouse on # Tmux >= 2.1
# set -g mode-mouse on # Tmux < 2.1

set -g clock-mode-style 24
# when session killed, make client switch
set -g detach-on-destroy off
# automatically number session windows
set -g renumber-windows on
# no bells
set -g visual-activity on
# update the title of my terminal
set -g set-titles on
set -g set-titles-string 'tmux@#H [#S:#I] #W'

# windows and panes start from 1
set -g base-index 1
set -g pane-base-index 1
# a lot of history is a good thing
set -g history-limit 10000
# cooler keybinding options
set -gw xterm-keys on
# improve color display for tmux session
set -g default-terminal "screen-256color"

# makes escape instant, but removes the
# ability to bind to meta keys :cry:.
# set -g escape-time 0

status_fg="#18181b" # matches my st theme bg.
status_bg="green"

# change prefix to C-q
unbind C-b
set-option -g prefix C-q
bind C-q send-prefix
# bind Space command-prompt

# bindings
## toggle the position of the status-bar
bind t set status-position #{?#{==:#{status-position},top},bottom,top}
## toggle whether to show the status-bar or not
bind T set -w status #{?#{==:#{status},on},on,off}

bind r command-prompt -I "#W" "rename-window -- '%%'"
bind R command-prompt -I "#S" "rename-session -- '%%'"

## toggle the marked status of the current pane
bind m select-pane -m
## maximise the current pane
bind Space resize-pane -Z
bind C-m   resize-pane -Z


## cycle preconfigured layouts
bind -r . next-layout
bind -r , previous-layout

bind e new-window "$EDITOR $HOME/.tmux.conf"

## reload my configuration
bind M-r source "$TMUX_HOME/tmuxrc" \; display-message "Config reloaded..."

## move between panes
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

### repeatable variants
bind -r C-h select-pane -L
bind -r C-j select-pane -D
bind -r C-k select-pane -U
bind -r C-l select-pane -R

## create a new window/panes
bind C-t new-window   -c '#{pane_current_path}'
bind C-v split-window -c '#{pane_current_path}' -h
bind C-s split-window -c '#{pane_current_path}'

### variants, where you can specify the command to run.
bind M-t command-prompt -I "$SHELL" "new-window '%%'"
bind M-v command-prompt -I "$SHELL" "split-window -h '%%'"
bind M-s command-prompt -I "$SHELL" "split-window '%%'"

## vim like, pane resize keys
bind -r < resize-pane -L 5
bind -r > resize-pane -R 5
bind -r + resize-pane -U 5
bind -r - resize-pane -D 5

### variants where you manually specify the percentage
bind M-< command-prompt -p "count" "resize-pane -L '%%'"
bind M-> command-prompt -p "count" "resize-pane -R '%%'"
bind M-+ command-prompt -p "count" "resize-pane -U '%%'"
bind M-- command-prompt -p "count" "resize-pane -D '%%'"

## move to next or previous window
bind -r Tab   next-window
bind -r C-Tab previous-window
bind    S-Tab last-pane

# bind    n   next-window
# bind    p   previous-window
bind -r C-n next-window
bind -r C-p previous-window
bind -r M-n switch-client -p
bind -r M-p switch-client -n

bind C-w kill-pane
bind M-w kill-window

bind B choose-tree -Zw
bind b choose-tree -Zs

## move marked pane into it's own tab
bind ! break-pane

## join marked pane onto current window
bind @ join-pane

# bind | pipe-pane

## exit tmux client
bind z   detach-client
bind C-z detach-client

bind M-0 command-prompt -p "index: " "select-pane -t ':%%'"
bind M-1 select-pane -t 1
bind M-2 select-pane -t 2
bind M-3 select-pane -t 3
bind M-4 select-pane -t 4
bind M-5 select-pane -t 5
bind M-6 select-pane -t 6
bind M-7 select-pane -t 7
bind M-8 select-pane -t 8
bind M-9 select-pane -t 9

bind 0 command-prompt -p index "select-window -t ':%%'"
bind 1 select-window -t 1
bind 2 select-window -t 2
bind 3 select-window -t 3
bind 4 select-window -t 4
bind 5 select-window -t 5
bind 6 select-window -t 6
bind 7 select-window -t 7
bind 8 select-window -t 8
bind 9 select-window -t 9

## visual mode. selection, yanking and pasting
bind                 p   paste-buffer
bind                 P   choose-buffer
bind                 V   copy-mode \; send-keys -X begin-selection
bind                 v   copy-mode
bind                 u   copy-mode \; send-keys -X halfpage-up
bind                 C-u copy-mode \; send-keys -X halfpage-up
bind -T copy-mode-vi C-g send-keys -X cancel
bind -T copy-mode-vi v   send-keys -X begin-selection
bind -T copy-mode-vi y   send-keys -X copy-selection-and-cancel
bind -T copy-mode-vi Y   send-keys -X copy-end-of-line
bind -T copy-mode-vi C-y send-keys -X append-selection
# replace search prompts with proper vim prompts. less verbose, but way cooler.
# bind -T copy-mode-vi /   command-prompt -p '/' 'send -X search-forward "%%%"'
# bind -T copy-mode-vi ?   command-prompt -p '?' 'send -X search-backward "%%%"'

# curtesy of [[https://gist.github.com/samoshkin/05e65f7f1c9b55d3fc7690b59d678734][samoshkin]]. let's you nest tmux sessions safely (kind-of)
# and makes focusing on the current pane (as if tmux isn't active)
# possible.
bind -T root F12  \
  set prefix None \;\
  set key-table off \;\
  set status off \;\
  set escape-time 0 \;\
  if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
  refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status \;\
  set -u escape-time \;\
  refresh-client -S

# theming
set -g status on
set -g status-interval 15
set -g status-justify left
set -g status-position bottom
set -g window-status-current-style fg=$status_bg,bg=$status_fg
set -g status-style fg=$status_fg,bg=$status_bg

set -g status-left "\
#[fg=$status_bg,bg=$status_fg]#{?client_prefix, ^SPC ,}\
#[fg=$status_fg,bg=#{?selection_present,yellow,yellow} bright]#{?pane_in_mode, #{?selection_present,COPY,META} ,}#[default] \
[#S] "
set -g status-left-length 20
set -g status-left-style default

set -g status-right " #{=15:pane_title}(#{=30:pane_current_command}) %d-%b-%Y %H:%M"
set -g status-right-length 40
set -g status-right-style default

# script bindings
bind C-a run -b "$TMUX_HOME/scripts/attach-session"
bind C-b run -b "$TMUX_HOME/scripts/run-binding -rpv"
# bind M-a run -b "$TMUX_HOME/scripts/manage-windows -s"
# bind M-w run -b "$TMUX_HOME/scripts/manage-windows"
bind w   run -b "$TMUX_HOME/scripts/manage-windows -i"
bind C-x run -b "$TMUX_HOME/scripts/run-command"
bind x   run -b "$TMUX_HOME/scripts/run-command"

# bind Enter set-window-option mouse # for some reason, can only be bound at EOF
