# -*- mode: conf-space; eval: (display-line-numbers-mode +1) -*-

# Configuration Options
## interpreter for shell commands (needs to be POSIX compatible)
set shell sh

## These options are used to have safer shell commands:
## * -e exit when a command has a non-zero exit code.
## * -u exit out when evaluating a unset variable
set shellopts '-eu'

## Split file names in $fs and $fx by the newline character.
set ifs "\n"

set icons
set hiddenfiles .*:__pycache__:*.pyc:*.o:node_modules:*.elc:*~:folder*.ico:folder*.jpg
set info size
#set relativenumber
set dircounts                                                                   # show number of files in directory, not size of directory inode.
$lf -remote "send $id set previewer ${XDG_CONFIG_HOME:-$HOME/.config}/lf/cmds/lf-preview"
set globsearch
set errorfmt "\033[1;31merror\033[0m: %s"
set incsearch
set nomouse
set noanchorfind
set noglobsearch

# Bindings
map c
map d
map p
map y
map w
map o
map cc clear
map dd cut
map dD delete
map pp paste
map yy copy

map ,
map g; find-prev

map <c-o> bottom
map <a-o> top

## Mouse
map <m-up>    up
map <m-down>  down
map <m-left>  up
map <m-right> down

## Toggles
map zd :set info time
map zl set relativenumber!
map zi :set icons!

## Misc
map <c-s> :push /
map gr :reload; sync
map cd push :cd<space>
map ,g push :glob-select<space>
map ,u push :glob-unselect<space>
$lf -remote "send $id map ,r source ${XDG_CONFIG_HOME:-$HOME/.config}/lf/cmds/lf-preview"

## Readline
cmap <c-g>  cmd-escape
cmap <up>   cmd-history-prev
cmap <down> cmd-history-next
cmap <c-b> cmd-word-back
cmap <c-f> cmd-word
cmap <a-b> cmd-left
cmap <a-f> cmd-right

## macros
### echo "$fx" | xargs -r -d '\n' -I%
map ,x push !echo<space>"$fx"<space>|<space>xargs<space>-r<space>-d<space>'\n'<space>-I%<space>
map ,X push &echo<space>"$fx"<space>|<space>xargs<space>-r<space>-d<space>'\n'<space>-I%<space>

### echo "$fx" | while read -r it; do ; done
map ,f push !echo<space>"$fx"<space>|<space>while<space>read<space>-r<space>it;<space>do<space>;<space>done<left><left><left><left><left><left>
map ,F push &echo<space>"$fx"<space>|<space>while<space>read<space>-r<space>it;<space>do<space>;<space>done<left><left><left><left><left><left>

### printf "%s\n" "$fx" | parallel -r -d '\n'
map ,p push !printf<space>"%s\n"<space>$fx<space>|<space>parallel<space>-r<space>-d<space>'\n'<space>
map ,P push &printf<space>"%s\n"<space>$fx<space>|<space>parallel<space>-r<space>-d<space>'\n'<space>


# Commands
map i $preview $f | ${PAGER:-less} -R
map I !true
map S $$SHELL
map <c-z> $kill -STOP $PPID

cmd toggle-backwards :up;toggle
map <bs>  toggle-backwards
map <bs2> toggle-backwards

## inspect folder sizes
map du du
# cmd du !du --max-depth=1 -h --apparent-size
cmd du !{{
  max_depth=0
  if [ -z "$fs" ]; then
    fx="."
    max_depth=1
  fi
  echo "$fx" | xargs -r -d "\n" du --max-depth="$max_depth" -h --apparent-size
}}

map dU du-sorted
cmd du-sorted !du --max-depth=1 -h --apparent-size | sort -rh

## Openers
map op $<<< "$fx" xargs -d '\n' -r $PAGER

map oc cat
cmd cat ${{
    # Concatenate out the current file to your PAGER.
    if [ -d "$f" ]; then
        $lf_previewer "$f"
    else
        cat -- "$f"
    fi | ${PAGER:-less}
}}

map oh hexdump
cmd hexdump ${{
    ( hexdump --color=always -C "$f" || xxd "$f" ) |
        ${PAGER:-less}
}}

# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
map <enter> open
map oo      open
cmd open ${{
    $OPENER $f >/dev/null 2>/dev/null &
}}

map oa open-all
cmd open-all ${{
    printf '%s\n' $fx |
        xargs -r -d '\n' $OPENER $f >/dev/null 2>/dev/null &
}}

map oy open-yank
cmd open-yank ${{
    # yank file contents into clipboard
    cat "$fx" | clip
}}

map oi open-images
cmd open-images &sxiv-ls $fx

map o! execute
cmd execute !{{
    if ! [ -x "$f" ]; then
        echo "file not executable: $f" >&2
        exit 1
    fi

    # see [[https://askubuntu.com/questions/850384/is-there-a-command-for-running-a-script-according-to-its-shebang-line][running through a shebang]].
    if [ -n "$(sed --silent -e '/^#!/p;2q' "$f")" ]; then
        perl "$f"; else $SHELL "$f"; fi
}}

map o& execute-async
cmd execute-async &{{
    if ! [ -x "$f" ]; then
        echo "file not executable: $f" >&2
        exit 1
    fi

    if [ -n "$(sed --silent -e '/^#!/p;2q' "$f")" ]; then
        perl "$f"; else $SHELL "$f"; fi
}}

map ob open-bookmark
cmd open-bookmark $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/fzbm; fzbm

map oP open-password
cmd open-password $bash -c '. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/fzpass; fzpass'

map og open-game
cmd open-game $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/open_game; open_game

## Change to directory (non-interactively)
map gt cd /tmp/
map g/ cd /
map ~  cd ~/

map gl goto-downloads
map dl goto-downloads
cmd goto-downloads $lf -remote "send $id cd \"${XDG_DOWNLOAD_DIR:-~/Downloads}\""

map gc goto-config
cmd goto-config $lf -remote "send $id cd \"${XDG_CONFIG_HOME:-~/.config}\""

map gb goto-bin
cmd goto-bin $lf -remote "send $id cd \"$XDG_CONFIG_HOME/.local/bin\""

map gi goto-images
cmd goto-images $lf -remote "send $id cd \"${XDG_PICTURES_DIR:-~/Pictures}\""

map gM goto-music
cmd goto-music $lf -remote "send $id cd \"${XDG_MUSIC_DIR:-~/Music}\""

map go goto-documents
cmd goto-documents $lf -remote "send $id cd \"${XDG_DOCUMENTS_DIR:-~/Documents}\""

map ct cdmktemp
cmd cdmktemp $lf -remote "send $id cd \"$(mktemp -d)\""

map cT cdltemp
cmd cdltemp ${{
    dest=$(date +"${XDG_TEMP_DIR:-$XDG_CONFIG_HOME/.local/temp}/%Y%m%d.%H%M%S")
    mkdir -p "$dest" &&
        lf -remote "send $id cd \"$dest\""
}}

map gs fzf-grep
cmd fzf-grep $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/fzf_grep; fzf_grep

map cls $true

## Select files/directories (interactively)
map ga goto-fsmap
cmd goto-fsmap $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/select_fsmap; select_fsmap

map gp goto-repo
cmd goto-repo $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/cd_repo; cd_repo

map gx goto-executable
cmd goto-executable $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/edit_executables; edit_executables

map ge goto-environment
cmd goto-environment $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/cd_env; cd_env

map gm goto-mount
cmd goto-mount $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/cd_mount; cd_mount

map gu goto-project-root
cmd goto-project-root %{{
    . $XDG_CONFIG_HOME/lf/auto/setup-fzf
    if root="$(project-root)"; then
        cd "$root"
    else
        lf -remote "send $id echoerr Failed to find a project root"
    fi
}}

map gj goto-link-dest
cmd goto-link-dest %{{
    [ -L "$f" ] || exit 0

    . $XDG_CONFIG_HOME/lf/auto/setup-fzf
    dest=$(readlink -e -- "$f")
    if [ -n "$dest" ]; then
        select_path "$dest"
    else
        lf -remote "send $id echoerr \"failed to find destination for link: $f\""
    fi
}}

map gd fzf-cd
cmd fzf-cd $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/fzf_select; . $XDG_CONFIG_HOME/autoloads/cmds/fzf_cd; fzf_cd

map gD fzf-cd-all
cmd fzf-cd-all $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/fzf_select; . $XDG_CONFIG_HOME/autoloads/cmds/fzf_cd_all; fzf_cd_all

map gf fzf-file
cmd fzf-file $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/fzf_select; . $XDG_CONFIG_HOME/autoloads/cmds/fzf_file; fzf_file

map gF fzf-file-all
cmd fzf-file-all $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/fzf_select; . $XDG_CONFIG_HOME/autoloads/cmds/fzf_file_all; fzf_file_all

map gn fzf-select
cmd fzf-select $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/fzf_select; fzf_select

map gN fzf-select-all
cmd fzf-select-all $. $XDG_CONFIG_HOME/lf/auto/setup-fzf; . $XDG_CONFIG_HOME/autoloads/cmds/fzf_select; . $XDG_CONFIG_HOME/autoloads/cmds/fzf_select_all; fzf_select_all

## Archive openers
map ox extract
cmd extract ${{
    # extract the current file with the right command
    echo "$fx" |
        xargs -r -d '\n' extract
}}

map ozt tar
cmd tar ${{
    # compress current file or selected files with tar and gunzip
    set -f
    if [ "$?" -gt 0 ]; then dest="$@"; elif [ -n "$fs" ]; then
        dest="$(basename "$(pwd)")-$(date +%Y%M%d%H%m%S).tar.gz"
    else
        dest="$(basename "$f")-$(date +%Y%M%d%H%m%S).tar.gz"
    fi

    if ! echo "$fx" | xargs -r -d '\n' realpath --relative-to="$(pwd)" | tar cavfT "$dest" -; then
        lf -remote "send $id echoerr \"failed to tar file's\""
    fi
}}

map ozT tar-replace
cmd tar-replace ${{
    set -f
    if [ "$?" -gt 0 ]; then dest="$@"; elif [ -n "$fs" ]; then
        dest="$(basename "$(pwd)")-$(date +%Y%M%d%H%m%S).tar.gz"
    else
        dest="$(basename "$f")-$(date +%Y%M%d%H%m%S).tar.gz"
    fi

    if ! echo "$fx" | xargs -r -d '\n' realpath --relative-to="$(pwd)" |
         tar -cav --file="$dest" --files-from="-" --remove-files; then
        lf -remote "send $id echoerr \"failed to tar file's\""
    fi
}}


map ozz zip
cmd zip ${{
    # compress current file or selected files with zip
    set -f
    if [ "$?" -gt 0 ]; then dest="$@"; elif [ -n "$fs" ]; then
        dest="$(basename "$(pwd)")-$(date +%Y%M%d%H%m%S).zip"
    else
        dest="$(basename "$f")-$(date +%Y%M%d%H%m%S).zip"
    fi

    if ! echo "$fx" | xargs -r -d '\n' realpath --relative-to="$(pwd)" | zip -r9 -y "$dest" -@; then
        lf -remote "send $id echoerr \"failed to zip file's\""
    fi
}}

map ozZ zip-replace
cmd zip-replace ${{
    set -f
    if [ "$?" -gt 0 ]; then dest="$@"; elif [ -n "$fs" ]; then
        dest="$(basename "$(pwd)")-$(date +%Y%M%d%H%m%S).zip"
    else
        dest="$(basename "$f")-$(date +%Y%M%d%H%m%S).zip"
    fi

    if ! echo "$fx" | xargs -r -d '\n' realpath --relative-to="$(pwd)" | zip -r9 "$dest" -@; then
        lf -remote "send $id echoerr \"failed to zip file's\""
    else
        echo "$fx" | xargs -r -d '\n' rm -rf
    fi
}}

## Pasting
map pl paste-links
cmd paste-links &$XDG_CONFIG_HOME/lf/cmds/paste-links

map pL paste-links-reverse
cmd paste-links-reverse &$XDG_CONFIG_HOME/lf/cmds/paste-links -r

# bulkrename a bunch of files, see [[https://github.com/gokcehan/lf/issues/149#issuecomment-470960434][here]].
map cw    bulkrename
map <a-e> bulkrename
cmd bulkrename ${{
    . $XDG_CONFIG_HOME/lf/auto/lf-files
    fs -maxdepth 1 |
        bulkrename -V -s "$f" -
}}

## recursively bulkrename all files
map cr bulkrename-all
cmd bulkrename-all ${{
    . $XDG_CONFIG_HOME/lf/auto/lf-files
    fsr -type f |
        bulkrename -V -s "$f" -
}}

## Misc
map +  :push :mkdir<space>
cmd mkdir %{{
    IFS=' '
    mkdir -p "$*"
    lf -remote "send $id load"$'\n'"send $id select \"$*\""
}}

map ,m :push :mkcd<space>
cmd mkcd %{{
    # make a directory and then change to it.
    IFS=' '
    mkdir -p "$*"
    lf -remote "send $id select \"$*\""$'\n'"send $id cd \"$*\""
}}

map - :push :touch<space>
cmd touch %{{
    file="$@"

    if [ -n "$file" ]; then
        directory=$(dirname "$file")
        mkdir -p "$directory"
        touch "$file"
        lf -remote "send $id load"$'\n'"send $id select \"$file\""
    fi
}}

map D  trash
map dt trash
map dT trash
cmd trash &{{ condemn $fx; lf -remote "send $id load"; }}

map ,o :show-opts
cmd show-opts !{{
    printenv | grep -i '^lf' | sort -V | "$PAGER"
}}

map x :push :chmod<space>
cmd chmod ${{
    [ -z "$1" ] && exit 1
    echo "$fx" | xargs -d '\n' chmod "$1"
    lf -remote "send $id reload"
}}

map cp bulkchmod
map cx bulkchmod
cmd bulkchmod ${{
    . $XDG_CONFIG_HOME/lf/auto/lf-files
    fs -maxdepth 1 |
        bulkchmod -s "$f" -c "$dir"
    lf -remote "send $id reload"
}}

map pm push :skeletor<space>
cmd skeletor ${{
    out="$*"
    if [ -z "$out" ]; then
        out=$(pwd)
        echo "warning: no dest directory supplied, defaulting to: $out" >&2
    fi

    skeletor create -o "$out"
    lf -remote "send $id cd \"$out\""
}}

# Editor
map oe evi
cmd evi $evi "$f"

map ,e edit-config
cmd edit-config ${{
    if $EDITOR $XDG_CONFIG_HOME/lf/lfrc; then
        lf -remote "send $id source $XDG_CONFIG_HOME/lf/lfrc"
    fi
}}

map ,E evi-config
cmd evi-config ${{
    if evi $XDG_CONFIG_HOME/lf/lfrc; then
        lf -remote "send $id source $XDG_CONFIG_HOME/lf/lfrc"
    fi
}}

# Toggles
set scrolloff 3
map zo toggle-scroll-offset
cmd toggle-scroll-offset ${{
    # leave some space at the top and the bottom of the screen
    if [ "$lf_scrolloff" -eq "0" ]; then offset=3; else offset=0; fi
    lf -remote "send $id set scrolloff $offset"
}}

map zp toggle-preview
cmd toggle-preview &{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id set nopreview"$'\n'"send $id set ratios 1:3"
    else
        lf -remote "send $id set preview"$'\n'"send $id set ratios 1:2:3"
    fi
}}

map zP toggle-parent-preview
cmd toggle-parent-preview ${{
    ratio="1:2:3"
    if [ "$lf_ratios" = "$ratio" ]; then
        ratio="1:1"
    fi
    lf -remote "send $id set ratios $ratio"
}}

cmd toggle-default-previewer &{{
    if [ "$lf_previewer" = "preview" ]; then
        lf -remote "send $id set previewer"
    else
        lf -remote "send $id set previewer preview"
    fi
}}

## Cut/copy list modifiers
map da cut-add
cmd cut-add %$XDG_CONFIG_HOME/lf/cmds/cut-add move

map dr cut-remove
cmd cut-remove  %$XDG_CONFIG_HOME/lf/cmds/cut-remove move

map ya copy-add
cmd copy-add %$XDG_CONFIG_HOME/lf/cmds/cut-add copy

map yr copy-remove
cmd copy-remove %$XDG_CONFIG_HOME/lf/cmds/cut-remove copy

map ,vf :select-files
cmd select-files &{{
    . $XDG_CONFIG_HOME/lf/auto/lf-files
    { echo "$fs"; fs -maxdepth 1 -not -type d; } |
        sed '/^$/d' | sort | uniq -u |
        xargs -d '\n' -r -I{} lf -remote "send $id toggle \"{}\""
    lf -remote "send $id sync"
}}

map ,vd :select-dirs
cmd select-dirs &{{
    . $XDG_CONFIG_HOME/lf/auto/lf-files
    { echo "$fs"; fs -maxdepth 1 -type d; } |
        sed '/^$/d' | sort | uniq -u |
        xargs -d '\n' -r -I{} lf -remote "send $id toggle \"{}\""
    lf -remote "send $id sync"
}}

# Clipboard
map yd yank-dirname
cmd yank-dirname &{{
    # yank the current working directory
    if [ -n "$f" ]; then dirname -- "$f"; else pwd; fi | clip -t
}}

map yp yank-path
cmd yank-path &echo "$fx" | clip -t

map yb yank-basename
cmd yank-basename &{{
    if [ -n "$fs" ]; then
      echo -e -- "$fs\n"
    else
      echo -- "$f"
    fi |
        xargs -r -d '\n' basename -a -- |
        clip -t
}}

map y. yank-basename-without-extension
cmd yank-basename-without-extension &{{
    echo "$fx" |
      xargs -r -d '\n' basename -a |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' |
      if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
      clip
}}

### Source local configuration
${{ if [ -r "$XDG_CONFIG_HOME/lf/lfrc.local" ]; then lf -remote "send $id source $XDG_CONFIG_HOME/lf/lfrc.local"; fi }}

# Local Variables:
# electric-pair-preserve-balance: t
# End:
