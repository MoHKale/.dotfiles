;; -*- mode: clojure -*-
(
 (:link
  "~/.config/rtorrent/rtorrent.rc" "rtorrent.rc"
  "~/.config/rtorrent/nginx.conf" "nginx.conf"
  {:src "secret" :dest "~/.cache/flood/.secret"
   :ignore-missing true})

 (:mkdirs "~/.config/nginx")

 (:import "scripts")

 ;; used for notifying a torrent has finished
 (:packages (:pip "inotify"))

 ;; woo boy, lets install all the dependencies (ノдヽ)
 (:packages
  (:apt "nginx"
        "libxmlrpc-core-c3-dev"
        "libxmlrpc-c++8-dev"
        "libcurl4-openssl-dev"
        ;; extensive install list from [[https://github.com/rakshasa/rtorrent/issues/618][here]].
        "libssl-dev"
        "zlib1g-dev"
        "libncurses-dev"
        "mediainfo"
        ;; I really miss pacman :cry:.
        {:pkg libtorrent-dev
         :manual "[ -z \"$(ldconfig -p | grep libtorrent)\" ] || exit 0 # already installed
                  set -e

                  lt_url='https://launchpad.net/ubuntu/+archive/primary/+sourcefiles/libtorrent/0.13.8-2build1/libtorrent_0.13.8.orig.tar.gz'
                  cd \"$(mktemp -d)\"
                  curl -L -o ./lt.tar.gz \"$lt_url\"
                  tar -xzvf ./lt.tar.gz
                  cd libtorrent-0.13.8
                  ./autogen.sh
                  ./configure --with-xmlrpc-c
                  make
                  sudo make install && sudo ldconfig"}
        {:pkg "rtorrent"
         :manual "[ -z \"$(which rtorrent)\" ] || exit 0 # already installed
                  set -e

                  cd \"$(mktemp -d)\"
                  git clone 'https://github.com/rakshasa/rtorrent' .
                  ./autogen.sh
                  ./configure --with-xmlrpc-c
                  make
                  sudo make install"}))

 (:import "../../langs/node")

 (:shell {:desc "Installing the Flood rtorrent frontend"
          :cmd "dest=$HOME/.cache/flood

                if [ -e \"$dest/config.js\" ]; then
                  exit 0 # flood has already been installed
                fi

                config=$(pwd)/floodrc
                if ! [ -r floodrc ]; then
                  echo \"config file not found: $config\" >&2
                  exit 1
                fi

                # generate a new random secret, to replace the default
                python3 -c '
                import random, string
                characters = string.ascii_letters + string.digits
                SECRET_LENGTH = 256
                print(\"\".join(random.SystemRandom().choice(characters) for _ in range(SECRET_LENGTH)))
                ' > secret

                # change to the destination directory and install all dependencies.
                if ! cd $dest; then
                  echo \"failed to change to the destination directory: $dest\" >&2
                  exit 1
                fi

                origin='https://github.com/Flood-UI/flood'
                git init
                git remote add origin \"$origin\"
                git fetch
                git checkout -t origin/master -f

                if ! yarnpkg install --verbose --network-timeout 100000000; then
                  echo 'failed to install node dependencies'
                  exit 1
                fi"})
)
