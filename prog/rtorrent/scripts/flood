#!/usr/bin/env bash
# manage a Tmux session dedicated to an rtorrent process and a flood daemon.
#
# This script spawns a new tmux session with $session_name, with a single
# window split into two panes. One containing the rtorrent UI, and the other
# displaying the logs from the flood interface.
#
# You can run this script to attach to the Tmux session, or pass the -r flag
# to have Tmux print out the URL of the flood web app.

print_usage() { echo "$0 [-h] [-r]"; }

run_only=0 # only check whether rtorrent is running, if not spawn it.
attach=1 # whether to attach to the tmux session after spawning it.

while getopts 'hr' OPTION; do
    case "$OPTION" in
        h) print_usage
           exit 0
           ;;
        \?) print_usage >&2
            exit 1
            ;;
        r) run_only=1 ;;
    esac
done

session_name='rtorrent'

function session_exists() {
    while read id name; do
        if [ "$name" = "$session_name" ]; then
            echo "$id"
            return 0
        fi
    done < <(tmux ls -F '#{session_id} #S' 2>/dev/null)

    return 1 # failed to find active tmux session with the desired name :sad:.
}

function create_session() {
    if ! tmux new-session -d -s "$session_name"; then
        echo 'failed to spawn new session for rtorrent' >&2
        exit 1
    fi

    new_session_p=1
}

# failed to create session for rtorrent process
if ! session_exists >/dev/null && ! create_session; then exit 1; fi

session_id="$(session_exists)"

rtorrent_dir="$HOME/.config/rtorrent"
rtorrent_session_file="$rtorrent_dir/session/rtorrent.pid"

# either the session file doesn't exist
if [ ! -r "$rtorrent_session_file" ] ||
       ! kill -0 "$(cat "$rtorrent_session_file")" 2>/dev/null; then

    if [ "${new_session_p:-0}" = 0 ]; then
        tmux new-window -t "$session_name"
    fi
    tmux send-keys -t "$session_name" "rtorrent" Enter
fi

flood_dir="$HOME/.cache/flood"
flood_config="$flood_dir/config.js"
flood_port=$(pcregrep -o1 '^\s*floodServerPort: (\d+),?$' "$flood_config")
flood_host=localhost # TODO actually parse host from config file

if [ -z "$flood_port" ]; then
    echo "failed to find flood port from config: $flood_config" >&2
    exit 1
fi

# flood server isn't running, yet
if ! nc -zv "$flood_host" "$flood_port" 2>/dev/null &&
       ! tmux split-window -l 100 -h -t "$session_name" -c "$flood_dir" 'yarn run start'; then
    echo "unable to start the flood server" >&2
    exit
fi

if [ "$run_only" -eq 0 ]; then
    tmux attach-session -t "$session_name"
else
    echo "${flood_host}:${flood_port}"
fi
