#!/usr/bin/env zsh
# -*- +indent: 2 -*- config file for zshells ZLE.
#
# shellcheck shell=bash

setopt listrowsfirst

if [ -n "$ZSHELL_BINDING_STYLE" ]; then
  source "$ZDOTDIR/bindings-$ZSHELL_BINDING_STYLE"
fi

autoload -U select-word-style
# for some reason, calling this now makes repeat C-w invocations, append to the
# previous kill. Just like bash :-)
select-word-style default

# like bashes edit-and-execute-command, but doesn't autorun
autoload -z edit-command-line
zle -N edit-command-line

# some nostalgic bashisms from [[https://github.com/davidshepherd7/dotfiles/blob/master/zsh/.zsh/zsh-bindings.sh#L9][davidshepard7]].
BASH_WORDCHARS='`~!@#$%^&*()-_=+[{]}\|;:",<.>/?'"'"
backward-bashword() {
  WORDCHARS=$BASH_WORDCHARS zle backward-word
}
zle -N backward-bashword

forward-bashword() {
  select-word-style bash
  WORDCHARS=$BASH_WORDCHARS zle forward-word
  select-word-style default
}
zle -N forward-bashword
ZSH_AUTOSUGGEST_PARTIAL_ACCEPT_WIDGETS+=(forward-bashword)

backward-kill-bashword() {
  zle -f kill # append if last action was also a kill
  WORDCHARS=$BASH_WORDCHARS zle backward-kill-word
}
zle -N backward-kill-bashword

# a command to replicate unix-filename-rubout, see [[https://unix.stackexchange.com/questions/258656/how-can-i-delete-to-a-slash-or-a-word-in-zsh][here]].
backward-kill-dir () {
  # note this should only kill upto a directory seperator
  # such as / or :.
  zle -f kill
  WORDCHARS="${WORDCHARS/\/}@" zle backward-kill-word
}
zle -N backward-kill-dir

# Autoload bindings
## Taken from [[https://www.reddit.com/r/zsh/comments/96asgu/how_to_bindkey_shell_commands_a_quick_guide/][here]], let's you run a command inbetween entering
## something to your shell (  ⚆ _ ⚆ ).
function zle_eval {
  # echo -en "\e[2K\r"
  echo
  eval "$@"
  zle redisplay
  zle reset-prompt
  true
}

zle_f() { zle_eval f; }
zle -N zle_f; bindkey "^x^f" zle_f

zle_d() { zle_eval d; }
zle -N zle_d; bindkey "^x^D" zle_d

zle_a() { zle_eval a; }
zle -N zle_a; bindkey "^x^a" zle_a

zle_b() { zle_eval b; }
zle -N zle_b; bindkey "^x^b" zle_b

zle_p() { zle_eval p; }
zle -N zle_p; bindkey "^x^p" zle_p

zle_gx() { zle_eval gx; }
zle -N zle_gx; bindkey "^x^x" zle_gx

zle_ge() { zle_eval ge; }
zle -N zle_ge; bindkey "^x^e" zle_ge

# External scripts
for fzf_script in /usr/share/fzf/key-bindings.zsh /etc/profile.d/fzf.zsh; do
  if [ -e "$fzf_script" ]; then
    source "$fzf_script"
    bindkey "^T" transpose-chars                                                  # Restore default ctrl-t binding.
    bindkey '\ec' capitalize-word                                                 # Restore default alt-c binding.
    FZF_CTRL_R_OPTS="$FZF_DEFAULT_OPTS $FZF_SHELL_OPTS --history '""$XDG_DATA_HOME""'/fzf/history/sh-history"
    break
  fi
done

# menuselect
## offers interactive completion selection
zmodload -i zsh/complist
zstyle ':completion:*' menu select=1
bindkey '^[[Z' reverse-menu-complete # backtab

bindkey -M menuselect "^p" backward-char
bindkey -M menuselect "^n" forward-char

bindkey -M menuselect "^h" backward-char
bindkey -M menuselect "^j" down-line-or-history
bindkey -M menuselect "^k" up-line-or-history
bindkey -M menuselect "^l" forward-char

# bindkey -M menuselect "^l" accept-line
bindkey -M menuselect "^o" accept-and-infer-next-history
