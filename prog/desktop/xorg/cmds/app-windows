#!/usr/bin/env bash
# -*- +indent: 2 -*-
#
# Output the X-window spec for every currently open window
# optionally matching some query.
#
# On certain platforms this program takes extra precautions
# to ensure the behaviour is consistent with what the user
# expects. For example on KDE activities act as one level
# above workspaces in the window hirearchy and we filter
# windows to only those visible in the current KDE activity.

set -e -o pipefail

print_usage() {
  echo "Usage: app-windows [-h] [COMMAND]"
}

print_help() {
  print_usage
  cat <<-EOF

  list open x-windows running COMMAND.

Optional Arguments:
  COMMAND
    The command name of windows to list. When ommitted we simply
    consider all windows regardless of which program their tied to.
EOF
}

while getopts 'h' OPTION; do
  case "$OPTION" in
    h) print_help
       exit 0 ;;
    \?) print_usage >&2
        exit 1 ;;
  esac
done
shift "$((OPTIND-1))"; command="$*"

# Strip the key(type) prefix from [[man:xprop][xprop]] output.
xprop_value() {
  sed \
    -e '/:  no such atom on any window\.$/s/^.*$//' \
    -e 's/^[^[:space:]]\+ = \(.*\)$/\1/' \
    -e 's/^[^[:space:]]\+: \(.*\)$/\1/'
}

# xprop filter that only shows windows bound to the current KDE activity.
kde_activity_sink() {
  # Current activity script taken from [[https://unix.stackexchange.com/a/643945][here]].
  local current_activity
  read -r current_activity <<< "$(
    dbus-send --session --dest=org.kde.ActivityManager \
              --type=method_call --print-reply=literal /ActivityManager/Activities \
              org.kde.ActivityManager.Activities.CurrentActivity)"
  if [ -z "$current_activity" ]; then
    echo "app-windows: error: failed to determine the current KDE activity." >&2
    return 1
  fi

  local it id activity
  while read -r it; do
    read -r id _ <<< "$it"
    activity=$(xprop -id "$id" _KDE_NET_WM_ACTIVITIES | xprop_value)
    # shellcheck disable=SC2076
    if [[ "$activity" =~ "$current_activity" ]]; then
      echo "$it"
    fi
  done
}

wmctrl -lp |
  if [ -z "$command" ]; then
    cat
  else
    while read -r it; do
      read -r id _ <<< "$it"
      class=$(xprop -id "$id" WM_CLASS | xprop_value)
      # shellcheck disable=SC2076
      if [[ '"'"$class"'"' =~ "$command" ]]; then
        echo "$it"
      fi
    done
  fi |
  case "${DESKTOP_SESSION:-}" in
    plasma)
      kde_activity_sink ;;
    *)
      cat ;;
  esac
